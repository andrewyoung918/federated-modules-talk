/**
 * This file is generated based on https://github.com/octokit/routes/ & "npm run build:ts".
 *
 * DO NOT EDIT MANUALLY.
 */

/**
 * This declaration file requires TypeScript 3.1 or above.
 */

/// <reference lib="esnext.asynciterable" />

import * as http from "http";

declare namespace Octokit {
  type json = any;
  type date = string;

  export interface Static {
    plugin(plugin: Plugin): Static;
    new (options?: Octokit.Options): Octokit;
  }

  export interface Response<T> {
    /** This is the data you would see in https://developer.github.com/v3/ */
    data: T;

    /** Response status number */
    status: number;

    /** Response headers */
    headers: {
      date: string;
      "x-ratelimit-limit": string;
      "x-ratelimit-remaining": string;
      "x-ratelimit-reset": string;
      "x-Octokit-request-id": string;
      "x-Octokit-media-type": string;
      link: string;
      "last-modified": string;
      etag: string;
      status: string;
    };

    [Symbol.iterator](): Iterator<any>;
  }

  export type AnyResponse = Response<any>;

  export interface EmptyParams {}

  export interface Options {
    authStrategy?: any;
    auth?:
      | string
      | { username: string; password: string; on2fa: () => Promise<string> }
      | { clientId: string; clientSecret: string }
      | { (): string | Promise<string> }
      | any;
    userAgent?: string;
    previews?: string[];
    baseUrl?: string;
    log?: {
      debug?: (message: string, info?: object) => void;
      info?: (message: string, info?: object) => void;
      warn?: (message: string, info?: object) => void;
      error?: (message: string, info?: object) => void;
    };
    request?: {
      agent?: http.Agent;
      timeout?: number;
    };
    /**
     * @deprecated Use {request: {timeout}} instead. See https://github.com/octokit/request.js#request
     */
    timeout?: number;
    /**
     * @deprecated Use {userAgent, previews} instead. See https://github.com/octokit/request.js#request
     */
    headers?: { [header: string]: any };
    /**
     * @deprecated Use {request: {agent}} instead. See https://github.com/octokit/request.js#request
     */
    agent?: http.Agent;
    [option: string]: any;
  }

  export type RequestMethod =
    | "DELETE"
    | "GET"
    | "HEAD"
    | "PATCH"
    | "POST"
    | "PUT";

  export interface EndpointOptions {
    baseUrl?: string;
    method?: RequestMethod;
    url?: string;
    headers?: { [header: string]: any };
    data?: any;
    request?: { [option: string]: any };
    [parameter: string]: any;
  }

  export interface RequestOptions {
    method?: RequestMethod;
    url?: string;
    headers?: RequestHeaders;
    body?: any;
    request?: OctokitRequestOptions;
    /**
     * Media type options, see {@link https://developer.github.com/v3/media/|GitHub Developer Guide}
     */
    mediaType?: {
      /**
       * `json` by default. Can be `raw`, `text`, `html`, `full`, `diff`, `patch`, `sha`, `base64`. Depending on endpoint
       */
      format?: string;

      /**
       * Custom media type names of {@link https://developer.github.com/v3/media/|API Previews} without the `-preview` suffix.
       * Example for single preview: `['squirrel-girl']`.
       * Example for multiple previews: `['squirrel-girl', 'mister-fantastic']`.
       */
      previews?: string[];
    };
  }

  export type RequestHeaders = {
    /**
     * Avoid setting `accept`, use `mediaFormat.{format|previews}` instead.
     */
    accept?: string;
    /**
     * Use `authorization` to send authenticated request, remember `token ` / `bearer ` prefixes. Example: `token 1234567890abcdef1234567890abcdef12345678`
     */
    authorization?: string;
    /**
     * `user-agent` is set do a default and can be overwritten as needed.
     */
    "user-agent"?: string;

    [header: string]: string | number | undefined;
  };

  export type OctokitRequestOptions = {
    /**
     * Node only. Useful for custom proxy, certificate, or dns lookup.
     */
    agent?: http.Agent;
    /**
     * Custom replacement for built-in fetch method. Useful for testing or request hooks.
     */
    fetch?: any;
    /**
     * Use an `AbortController` instance to cancel a request. In node you can only cancel streamed requests.
     */
    signal?: any;
    /**
     * Node only. Request/response timeout in ms, it resets on redirect. 0 to disable (OS limit applies). `options.request.signal` is recommended instead.
     */
    timeout?: number;

    [option: string]: any;
  };

  export interface Log {
    debug: (message: string, additionalInfo?: object) => void;
    info: (message: string, additionalInfo?: object) => void;
    warn: (message: string, additionalInfo?: object) => void;
    error: (message: string, additionalInfo?: object) => void;
  }

  export interface Endpoint {
    (
      Route: string,
      EndpointOptions?: Octokit.EndpointOptions
    ): Octokit.RequestOptions;
    (EndpointOptions: Octokit.EndpointOptions): Octokit.RequestOptions;
    /**
     * Current default options
     */
    DEFAULTS: Octokit.EndpointOptions;
    /**
     * Get the defaulted endpoint options, but without parsing them into request options:
     */
    merge(
      Route: string,
      EndpointOptions?: Octokit.EndpointOptions
    ): Octokit.RequestOptions;
    merge(EndpointOptions: Octokit.EndpointOptions): Octokit.RequestOptions;
    /**
     * Stateless method to turn endpoint options into request options. Calling endpoint(options) is the same as calling endpoint.parse(endpoint.merge(options)).
     */
    parse(EndpointOptions: Octokit.EndpointOptions): Octokit.RequestOptions;
    /**
     * Merges existing defaults with passed options and returns new endpoint() method with new defaults
     */
    defaults(EndpointOptions: Octokit.EndpointOptions): Octokit.Endpoint;
  }

  export interface Request {
    (Route: string, EndpointOptions?: Octokit.EndpointOptions): Promise<
      Octokit.AnyResponse
    >;
    (EndpointOptions: Octokit.EndpointOptions): Promise<Octokit.AnyResponse>;
    endpoint: Octokit.Endpoint;
  }

  export interface AuthBasic {
    type: "basic";
    username: string;
    password: string;
  }

  export interface AuthOAuthToken {
    type: "oauth";
    token: string;
  }

  export interface AuthOAuthSecret {
    type: "oauth";
    key: string;
    secret: string;
  }

  export interface AuthUserToken {
    type: "token";
    token: string;
  }

  export interface AuthJWT {
    type: "app";
    token: string;
  }

  export type Link = { link: string } | { headers: { link: string } } | string;

  export interface Callback<T> {
    (error: Error | null, result: T): any;
  }

  export type Plugin = (octokit: Octokit, options: Octokit.Options) => void;

  // See https://github.com/octokit/request.js#request
  export type HookOptions = {
    baseUrl: string;
    headers: { [header: string]: string };
    method: string;
    url: string;
    data: any;
    // See https://github.com/bitinn/node-fetch#options
    request: {
      follow?: number;
      timeout?: number;
      compress?: boolean;
      size?: number;
      agent?: string | null;
    };
    [index: string]: any;
  };

  export type HookError = Error & {
    status: number;
    headers: { [header: string]: string };
    documentation_url?: string;
    errors?: [
      {
        resource: string;
        field: string;
        code: string;
      }
    ];
  };

  export interface Paginate {
    (
      Route: string,
      EndpointOptions?: Octokit.EndpointOptions,
      callback?: (response: Octokit.AnyResponse, done: () => void) => any
    ): Promise<any[]>;
    (
      EndpointOptions: Octokit.EndpointOptions,
      callback?: (response: Octokit.AnyResponse, done: () => void) => any
    ): Promise<any[]>;
    iterator: (
      EndpointOptions: Octokit.EndpointOptions
    ) => AsyncIterableIterator<Octokit.AnyResponse>;
  }

  // response types
  type UsersUpdateAuthenticatedResponsePlan = {
    collaborators: number;
    name: string;
    private_repos: number;
    space: number;
  };
  type UsersUpdateAuthenticatedResponse = {
    avatar_url: string;
    bio: string;
    blog: string;
    collaborators: number;
    company: string;
    created_at: string;
    disk_usage: number;
    email: string;
    events_url: string;
    followers: number;
    followers_url: string;
    following: number;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    hireable: boolean;
    html_url: string;
    id: number;
    location: string;
    login: string;
    name: string;
    node_id: string;
    organizations_url: string;
    owned_private_repos: number;
    plan: UsersUpdateAuthenticatedResponsePlan;
    private_gists: number;
    public_gists: number;
    public_repos: number;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    total_private_repos: number;
    two_factor_authentication: boolean;
    type: string;
    updated_at: string;
    url: string;
  };
  type UsersTogglePrimaryEmailVisibilityResponseItem = {
    email: string;
    primary: boolean;
    verified: boolean;
    visibility: string;
  };
  type UsersListPublicKeysForUserResponseItem = { id: number; key: string };
  type UsersListPublicKeysResponseItem = { key: string; key_id: string };
  type UsersListPublicEmailsResponseItem = {
    email: string;
    primary: boolean;
    verified: boolean;
    visibility: string;
  };
  type UsersListGpgKeysForUserResponseItemSubkeysItem = {
    can_certify: boolean;
    can_encrypt_comms: boolean;
    can_encrypt_storage: boolean;
    can_sign: boolean;
    created_at: string;
    emails: Array<any>;
    expires_at: null;
    id: number;
    key_id: string;
    primary_key_id: number;
    public_key: string;
    subkeys: Array<any>;
  };
  type UsersListGpgKeysForUserResponseItemEmailsItem = {
    email: string;
    verified: boolean;
  };
  type UsersListGpgKeysForUserResponseItem = {
    can_certify: boolean;
    can_encrypt_comms: boolean;
    can_encrypt_storage: boolean;
    can_sign: boolean;
    created_at: string;
    emails: Array<UsersListGpgKeysForUserResponseItemEmailsItem>;
    expires_at: null;
    id: number;
    key_id: string;
    primary_key_id: null;
    public_key: string;
    subkeys: Array<UsersListGpgKeysForUserResponseItemSubkeysItem>;
  };
  type UsersListGpgKeysResponseItemSubkeysItem = {
    can_certify: boolean;
    can_encrypt_comms: boolean;
    can_encrypt_storage: boolean;
    can_sign: boolean;
    created_at: string;
    emails: Array<any>;
    expires_at: null;
    id: number;
    key_id: string;
    primary_key_id: number;
    public_key: string;
    subkeys: Array<any>;
  };
  type UsersListGpgKeysResponseItemEmailsItem = {
    email: string;
    verified: boolean;
  };
  type UsersListGpgKeysResponseItem = {
    can_certify: boolean;
    can_encrypt_comms: boolean;
    can_encrypt_storage: boolean;
    can_sign: boolean;
    created_at: string;
    emails: Array<UsersListGpgKeysResponseItemEmailsItem>;
    expires_at: null;
    id: number;
    key_id: string;
    primary_key_id: null;
    public_key: string;
    subkeys: Array<UsersListGpgKeysResponseItemSubkeysItem>;
  };
  type UsersListFollowingForUserResponseItem = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type UsersListFollowingForAuthenticatedUserResponseItem = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type UsersListFollowersForUserResponseItem = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type UsersListFollowersForAuthenticatedUserResponseItem = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type UsersListEmailsResponseItem = {
    email: string;
    primary: boolean;
    verified: boolean;
    visibility: string;
  };
  type UsersListBlockedResponseItem = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type UsersListResponseItem = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type UsersGetPublicKeyResponse = { key: string; key_id: string };
  type UsersGetGpgKeyResponseSubkeysItem = {
    can_certify: boolean;
    can_encrypt_comms: boolean;
    can_encrypt_storage: boolean;
    can_sign: boolean;
    created_at: string;
    emails: Array<any>;
    expires_at: null;
    id: number;
    key_id: string;
    primary_key_id: number;
    public_key: string;
    subkeys: Array<any>;
  };
  type UsersGetGpgKeyResponseEmailsItem = { email: string; verified: boolean };
  type UsersGetGpgKeyResponse = {
    can_certify: boolean;
    can_encrypt_comms: boolean;
    can_encrypt_storage: boolean;
    can_sign: boolean;
    created_at: string;
    emails: Array<UsersGetGpgKeyResponseEmailsItem>;
    expires_at: null;
    id: number;
    key_id: string;
    primary_key_id: null;
    public_key: string;
    subkeys: Array<UsersGetGpgKeyResponseSubkeysItem>;
  };
  type UsersGetContextForUserResponseContextsItem = {
    message: string;
    octicon: string;
  };
  type UsersGetContextForUserResponse = {
    contexts: Array<UsersGetContextForUserResponseContextsItem>;
  };
  type UsersGetByUsernameResponsePlan = {
    collaborators: number;
    name: string;
    private_repos: number;
    space: number;
  };
  type UsersGetByUsernameResponse = {
    avatar_url: string;
    bio: string;
    blog: string;
    company: string;
    created_at: string;
    email: string;
    events_url: string;
    followers: number;
    followers_url: string;
    following: number;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    hireable: boolean;
    html_url: string;
    id: number;
    location: string;
    login: string;
    name: string;
    node_id: string;
    organizations_url: string;
    public_gists: number;
    public_repos: number;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    updated_at: string;
    url: string;
    plan?: UsersGetByUsernameResponsePlan;
  };
  type UsersGetAuthenticatedResponsePlan = {
    collaborators: number;
    name: string;
    private_repos: number;
    space: number;
  };
  type UsersGetAuthenticatedResponse = {
    avatar_url: string;
    bio: string;
    blog: string;
    collaborators?: number;
    company: string;
    created_at: string;
    disk_usage?: number;
    email: string;
    events_url: string;
    followers: number;
    followers_url: string;
    following: number;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    hireable: boolean;
    html_url: string;
    id: number;
    location: string;
    login: string;
    name: string;
    node_id: string;
    organizations_url: string;
    owned_private_repos?: number;
    plan?: UsersGetAuthenticatedResponsePlan;
    private_gists?: number;
    public_gists: number;
    public_repos: number;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    total_private_repos?: number;
    two_factor_authentication?: boolean;
    type: string;
    updated_at: string;
    url: string;
  };
  type UsersCreatePublicKeyResponse = { key: string; key_id: string };
  type UsersCreateGpgKeyResponseSubkeysItem = {
    can_certify: boolean;
    can_encrypt_comms: boolean;
    can_encrypt_storage: boolean;
    can_sign: boolean;
    created_at: string;
    emails: Array<any>;
    expires_at: null;
    id: number;
    key_id: string;
    primary_key_id: number;
    public_key: string;
    subkeys: Array<any>;
  };
  type UsersCreateGpgKeyResponseEmailsItem = {
    email: string;
    verified: boolean;
  };
  type UsersCreateGpgKeyResponse = {
    can_certify: boolean;
    can_encrypt_comms: boolean;
    can_encrypt_storage: boolean;
    can_sign: boolean;
    created_at: string;
    emails: Array<UsersCreateGpgKeyResponseEmailsItem>;
    expires_at: null;
    id: number;
    key_id: string;
    primary_key_id: null;
    public_key: string;
    subkeys: Array<UsersCreateGpgKeyResponseSubkeysItem>;
  };
  type UsersAddEmailsResponseItem = {
    email: string;
    primary: boolean;
    verified: boolean;
    visibility: string | null;
  };
  type TeamsUpdateLegacyResponseOrganization = {
    avatar_url: string;
    blog: string;
    company: string;
    created_at: string;
    description: string;
    email: string;
    events_url: string;
    followers: number;
    following: number;
    has_organization_projects: boolean;
    has_repository_projects: boolean;
    hooks_url: string;
    html_url: string;
    id: number;
    is_verified: boolean;
    issues_url: string;
    location: string;
    login: string;
    members_url: string;
    name: string;
    node_id: string;
    public_gists: number;
    public_members_url: string;
    public_repos: number;
    repos_url: string;
    type: string;
    url: string;
  };
  type TeamsUpdateLegacyResponse = {
    created_at: string;
    description: string;
    html_url: string;
    id: number;
    members_count: number;
    members_url: string;
    name: string;
    node_id: string;
    organization: TeamsUpdateLegacyResponseOrganization;
    parent: null;
    permission: string;
    privacy: string;
    repos_count: number;
    repositories_url: string;
    slug: string;
    updated_at: string;
    url: string;
  };
  type TeamsUpdateInOrgResponseOrganization = {
    avatar_url: string;
    blog: string;
    company: string;
    created_at: string;
    description: string;
    email: string;
    events_url: string;
    followers: number;
    following: number;
    has_organization_projects: boolean;
    has_repository_projects: boolean;
    hooks_url: string;
    html_url: string;
    id: number;
    is_verified: boolean;
    issues_url: string;
    location: string;
    login: string;
    members_url: string;
    name: string;
    node_id: string;
    public_gists: number;
    public_members_url: string;
    public_repos: number;
    repos_url: string;
    type: string;
    url: string;
  };
  type TeamsUpdateInOrgResponse = {
    created_at: string;
    description: string;
    html_url: string;
    id: number;
    members_count: number;
    members_url: string;
    name: string;
    node_id: string;
    organization: TeamsUpdateInOrgResponseOrganization;
    parent: null;
    permission: string;
    privacy: string;
    repos_count: number;
    repositories_url: string;
    slug: string;
    updated_at: string;
    url: string;
  };
  type TeamsUpdateDiscussionLegacyResponseReactions = {
    "+1": number;
    "-1": number;
    confused: number;
    heart: number;
    hooray: number;
    laugh: number;
    total_count: number;
    url: string;
  };
  type TeamsUpdateDiscussionLegacyResponseAuthor = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type TeamsUpdateDiscussionLegacyResponse = {
    author: TeamsUpdateDiscussionLegacyResponseAuthor;
    body: string;
    body_html: string;
    body_version: string;
    comments_count: number;
    comments_url: string;
    created_at: string;
    html_url: string;
    last_edited_at: string;
    node_id: string;
    number: number;
    pinned: boolean;
    private: boolean;
    reactions: TeamsUpdateDiscussionLegacyResponseReactions;
    team_url: string;
    title: string;
    updated_at: string;
    url: string;
  };
  type TeamsUpdateDiscussionInOrgResponseReactions = {
    "+1": number;
    "-1": number;
    confused: number;
    heart: number;
    hooray: number;
    laugh: number;
    total_count: number;
    url: string;
  };
  type TeamsUpdateDiscussionInOrgResponseAuthor = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type TeamsUpdateDiscussionInOrgResponse = {
    author: TeamsUpdateDiscussionInOrgResponseAuthor;
    body: string;
    body_html: string;
    body_version: string;
    comments_count: number;
    comments_url: string;
    created_at: string;
    html_url: string;
    last_edited_at: string;
    node_id: string;
    number: number;
    pinned: boolean;
    private: boolean;
    reactions: TeamsUpdateDiscussionInOrgResponseReactions;
    team_url: string;
    title: string;
    updated_at: string;
    url: string;
  };
  type TeamsUpdateDiscussionCommentLegacyResponseReactions = {
    "+1": number;
    "-1": number;
    confused: number;
    heart: number;
    hooray: number;
    laugh: number;
    total_count: number;
    url: string;
  };
  type TeamsUpdateDiscussionCommentLegacyResponseAuthor = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type TeamsUpdateDiscussionCommentLegacyResponse = {
    author: TeamsUpdateDiscussionCommentLegacyResponseAuthor;
    body: string;
    body_html: string;
    body_version: string;
    created_at: string;
    discussion_url: string;
    html_url: string;
    last_edited_at: string;
    node_id: string;
    number: number;
    reactions: TeamsUpdateDiscussionCommentLegacyResponseReactions;
    updated_at: string;
    url: string;
  };
  type TeamsUpdateDiscussionCommentInOrgResponseReactions = {
    "+1": number;
    "-1": number;
    confused: number;
    heart: number;
    hooray: number;
    laugh: number;
    total_count: number;
    url: string;
  };
  type TeamsUpdateDiscussionCommentInOrgResponseAuthor = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type TeamsUpdateDiscussionCommentInOrgResponse = {
    author: TeamsUpdateDiscussionCommentInOrgResponseAuthor;
    body: string;
    body_html: string;
    body_version: string;
    created_at: string;
    discussion_url: string;
    html_url: string;
    last_edited_at: string;
    node_id: string;
    number: number;
    reactions: TeamsUpdateDiscussionCommentInOrgResponseReactions;
    updated_at: string;
    url: string;
  };
  type TeamsUpdateDiscussionCommentResponseReactions = {
    "+1": number;
    "-1": number;
    confused: number;
    heart: number;
    hooray: number;
    laugh: number;
    total_count: number;
    url: string;
  };
  type TeamsUpdateDiscussionCommentResponseAuthor = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type TeamsUpdateDiscussionCommentResponse = {
    author: TeamsUpdateDiscussionCommentResponseAuthor;
    body: string;
    body_html: string;
    body_version: string;
    created_at: string;
    discussion_url: string;
    html_url: string;
    last_edited_at: string;
    node_id: string;
    number: number;
    reactions: TeamsUpdateDiscussionCommentResponseReactions;
    updated_at: string;
    url: string;
  };
  type TeamsUpdateDiscussionResponseReactions = {
    "+1": number;
    "-1": number;
    confused: number;
    heart: number;
    hooray: number;
    laugh: number;
    total_count: number;
    url: string;
  };
  type TeamsUpdateDiscussionResponseAuthor = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type TeamsUpdateDiscussionResponse = {
    author: TeamsUpdateDiscussionResponseAuthor;
    body: string;
    body_html: string;
    body_version: string;
    comments_count: number;
    comments_url: string;
    created_at: string;
    html_url: string;
    last_edited_at: string;
    node_id: string;
    number: number;
    pinned: boolean;
    private: boolean;
    reactions: TeamsUpdateDiscussionResponseReactions;
    team_url: string;
    title: string;
    updated_at: string;
    url: string;
  };
  type TeamsUpdateResponseOrganization = {
    avatar_url: string;
    blog: string;
    company: string;
    created_at: string;
    description: string;
    email: string;
    events_url: string;
    followers: number;
    following: number;
    has_organization_projects: boolean;
    has_repository_projects: boolean;
    hooks_url: string;
    html_url: string;
    id: number;
    is_verified: boolean;
    issues_url: string;
    location: string;
    login: string;
    members_url: string;
    name: string;
    node_id: string;
    public_gists: number;
    public_members_url: string;
    public_repos: number;
    repos_url: string;
    type: string;
    url: string;
  };
  type TeamsUpdateResponse = {
    created_at: string;
    description: string;
    html_url: string;
    id: number;
    members_count: number;
    members_url: string;
    name: string;
    node_id: string;
    organization: TeamsUpdateResponseOrganization;
    parent: null;
    permission: string;
    privacy: string;
    repos_count: number;
    repositories_url: string;
    slug: string;
    updated_at: string;
    url: string;
  };
  type TeamsReviewProjectLegacyResponsePermissions = {
    admin: boolean;
    read: boolean;
    write: boolean;
  };
  type TeamsReviewProjectLegacyResponseCreator = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type TeamsReviewProjectLegacyResponse = {
    body: string;
    columns_url: string;
    created_at: string;
    creator: TeamsReviewProjectLegacyResponseCreator;
    html_url: string;
    id: number;
    name: string;
    node_id: string;
    number: number;
    organization_permission: string;
    owner_url: string;
    permissions: TeamsReviewProjectLegacyResponsePermissions;
    private: boolean;
    state: string;
    updated_at: string;
    url: string;
  };
  type TeamsReviewProjectInOrgResponsePermissions = {
    admin: boolean;
    read: boolean;
    write: boolean;
  };
  type TeamsReviewProjectInOrgResponseCreator = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type TeamsReviewProjectInOrgResponse = {
    body: string;
    columns_url: string;
    created_at: string;
    creator: TeamsReviewProjectInOrgResponseCreator;
    html_url: string;
    id: number;
    name: string;
    node_id: string;
    number: number;
    organization_permission: string;
    owner_url: string;
    permissions: TeamsReviewProjectInOrgResponsePermissions;
    private: boolean;
    state: string;
    updated_at: string;
    url: string;
  };
  type TeamsReviewProjectResponsePermissions = {
    admin: boolean;
    read: boolean;
    write: boolean;
  };
  type TeamsReviewProjectResponseCreator = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type TeamsReviewProjectResponse = {
    body: string;
    columns_url: string;
    created_at: string;
    creator: TeamsReviewProjectResponseCreator;
    html_url: string;
    id: number;
    name: string;
    node_id: string;
    number: number;
    organization_permission: string;
    owner_url: string;
    permissions: TeamsReviewProjectResponsePermissions;
    private: boolean;
    state: string;
    updated_at: string;
    url: string;
  };
  type TeamsListReposLegacyResponseItemPermissions = {
    admin: boolean;
    pull: boolean;
    push: boolean;
  };
  type TeamsListReposLegacyResponseItemOwner = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type TeamsListReposLegacyResponseItemLicense = {
    key: string;
    name: string;
    node_id: string;
    spdx_id: string;
    url: string;
  };
  type TeamsListReposLegacyResponseItem = {
    archive_url: string;
    archived: boolean;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    clone_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    created_at: string;
    default_branch: string;
    deployments_url: string;
    description: string;
    disabled: boolean;
    downloads_url: string;
    events_url: string;
    fork: boolean;
    forks_count: number;
    forks_url: string;
    full_name: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    has_downloads: boolean;
    has_issues: boolean;
    has_pages: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    homepage: string;
    hooks_url: string;
    html_url: string;
    id: number;
    is_template: boolean;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    language: null;
    languages_url: string;
    license: TeamsListReposLegacyResponseItemLicense;
    merges_url: string;
    milestones_url: string;
    mirror_url: string;
    name: string;
    network_count: number;
    node_id: string;
    notifications_url: string;
    open_issues_count: number;
    owner: TeamsListReposLegacyResponseItemOwner;
    permissions: TeamsListReposLegacyResponseItemPermissions;
    private: boolean;
    pulls_url: string;
    pushed_at: string;
    releases_url: string;
    size: number;
    ssh_url: string;
    stargazers_count: number;
    stargazers_url: string;
    statuses_url: string;
    subscribers_count: number;
    subscribers_url: string;
    subscription_url: string;
    svn_url: string;
    tags_url: string;
    teams_url: string;
    temp_clone_token: string;
    template_repository: null;
    topics: Array<string>;
    trees_url: string;
    updated_at: string;
    url: string;
    visibility: string;
    watchers_count: number;
  };
  type TeamsListReposInOrgResponseItemPermissions = {
    admin: boolean;
    pull: boolean;
    push: boolean;
  };
  type TeamsListReposInOrgResponseItemOwner = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type TeamsListReposInOrgResponseItemLicense = {
    key: string;
    name: string;
    node_id: string;
    spdx_id: string;
    url: string;
  };
  type TeamsListReposInOrgResponseItem = {
    archive_url: string;
    archived: boolean;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    clone_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    created_at: string;
    default_branch: string;
    deployments_url: string;
    description: string;
    disabled: boolean;
    downloads_url: string;
    events_url: string;
    fork: boolean;
    forks_count: number;
    forks_url: string;
    full_name: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    has_downloads: boolean;
    has_issues: boolean;
    has_pages: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    homepage: string;
    hooks_url: string;
    html_url: string;
    id: number;
    is_template: boolean;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    language: null;
    languages_url: string;
    license: TeamsListReposInOrgResponseItemLicense;
    merges_url: string;
    milestones_url: string;
    mirror_url: string;
    name: string;
    network_count: number;
    node_id: string;
    notifications_url: string;
    open_issues_count: number;
    owner: TeamsListReposInOrgResponseItemOwner;
    permissions: TeamsListReposInOrgResponseItemPermissions;
    private: boolean;
    pulls_url: string;
    pushed_at: string;
    releases_url: string;
    size: number;
    ssh_url: string;
    stargazers_count: number;
    stargazers_url: string;
    statuses_url: string;
    subscribers_count: number;
    subscribers_url: string;
    subscription_url: string;
    svn_url: string;
    tags_url: string;
    teams_url: string;
    temp_clone_token: string;
    template_repository: null;
    topics: Array<string>;
    trees_url: string;
    updated_at: string;
    url: string;
    visibility: string;
    watchers_count: number;
  };
  type TeamsListReposResponseItemPermissions = {
    admin: boolean;
    pull: boolean;
    push: boolean;
  };
  type TeamsListReposResponseItemOwner = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type TeamsListReposResponseItemLicense = {
    key: string;
    name: string;
    node_id: string;
    spdx_id: string;
    url: string;
  };
  type TeamsListReposResponseItem = {
    archive_url: string;
    archived: boolean;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    clone_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    created_at: string;
    default_branch: string;
    deployments_url: string;
    description: string;
    disabled: boolean;
    downloads_url: string;
    events_url: string;
    fork: boolean;
    forks_count: number;
    forks_url: string;
    full_name: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    has_downloads: boolean;
    has_issues: boolean;
    has_pages: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    homepage: string;
    hooks_url: string;
    html_url: string;
    id: number;
    is_template: boolean;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    language: null;
    languages_url: string;
    license: TeamsListReposResponseItemLicense;
    merges_url: string;
    milestones_url: string;
    mirror_url: string;
    name: string;
    network_count: number;
    node_id: string;
    notifications_url: string;
    open_issues_count: number;
    owner: TeamsListReposResponseItemOwner;
    permissions: TeamsListReposResponseItemPermissions;
    private: boolean;
    pulls_url: string;
    pushed_at: string;
    releases_url: string;
    size: number;
    ssh_url: string;
    stargazers_count: number;
    stargazers_url: string;
    statuses_url: string;
    subscribers_count: number;
    subscribers_url: string;
    subscription_url: string;
    svn_url: string;
    tags_url: string;
    teams_url: string;
    temp_clone_token: string;
    template_repository: null;
    topics: Array<string>;
    trees_url: string;
    updated_at: string;
    url: string;
    visibility: string;
    watchers_count: number;
  };
  type TeamsListProjectsLegacyResponseItemPermissions = {
    admin: boolean;
    read: boolean;
    write: boolean;
  };
  type TeamsListProjectsLegacyResponseItemCreator = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type TeamsListProjectsLegacyResponseItem = {
    body: string;
    columns_url: string;
    created_at: string;
    creator: TeamsListProjectsLegacyResponseItemCreator;
    html_url: string;
    id: number;
    name: string;
    node_id: string;
    number: number;
    organization_permission: string;
    owner_url: string;
    permissions: TeamsListProjectsLegacyResponseItemPermissions;
    private: boolean;
    state: string;
    updated_at: string;
    url: string;
  };
  type TeamsListProjectsInOrgResponseItemPermissions = {
    admin: boolean;
    read: boolean;
    write: boolean;
  };
  type TeamsListProjectsInOrgResponseItemCreator = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type TeamsListProjectsInOrgResponseItem = {
    body: string;
    columns_url: string;
    created_at: string;
    creator: TeamsListProjectsInOrgResponseItemCreator;
    html_url: string;
    id: number;
    name: string;
    node_id: string;
    number: number;
    organization_permission: string;
    owner_url: string;
    permissions: TeamsListProjectsInOrgResponseItemPermissions;
    private: boolean;
    state: string;
    updated_at: string;
    url: string;
  };
  type TeamsListProjectsResponseItemPermissions = {
    admin: boolean;
    read: boolean;
    write: boolean;
  };
  type TeamsListProjectsResponseItemCreator = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type TeamsListProjectsResponseItem = {
    body: string;
    columns_url: string;
    created_at: string;
    creator: TeamsListProjectsResponseItemCreator;
    html_url: string;
    id: number;
    name: string;
    node_id: string;
    number: number;
    organization_permission: string;
    owner_url: string;
    permissions: TeamsListProjectsResponseItemPermissions;
    private: boolean;
    state: string;
    updated_at: string;
    url: string;
  };
  type TeamsListPendingInvitationsLegacyResponseItemInviter = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type TeamsListPendingInvitationsLegacyResponseItem = {
    created_at: string;
    email: string;
    id: number;
    invitation_team_url: string;
    inviter: TeamsListPendingInvitationsLegacyResponseItemInviter;
    login: string;
    role: string;
    team_count: number;
  };
  type TeamsListPendingInvitationsInOrgResponseItemInviter = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type TeamsListPendingInvitationsInOrgResponseItem = {
    created_at: string;
    email: string;
    id: number;
    invitation_team_url: string;
    inviter: TeamsListPendingInvitationsInOrgResponseItemInviter;
    login: string;
    role: string;
    team_count: number;
  };
  type TeamsListPendingInvitationsResponseItemInviter = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type TeamsListPendingInvitationsResponseItem = {
    created_at: string;
    email: string;
    id: number;
    invitation_team_url: string;
    inviter: TeamsListPendingInvitationsResponseItemInviter;
    login: string;
    role: string;
    team_count: number;
  };
  type TeamsListMembersLegacyResponseItem = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type TeamsListMembersInOrgResponseItem = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type TeamsListMembersResponseItem = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type TeamsListForAuthenticatedUserResponseItemOrganization = {
    avatar_url: string;
    blog: string;
    company: string;
    created_at: string;
    description: string;
    email: string;
    events_url: string;
    followers: number;
    following: number;
    has_organization_projects: boolean;
    has_repository_projects: boolean;
    hooks_url: string;
    html_url: string;
    id: number;
    is_verified: boolean;
    issues_url: string;
    location: string;
    login: string;
    members_url: string;
    name: string;
    node_id: string;
    public_gists: number;
    public_members_url: string;
    public_repos: number;
    repos_url: string;
    type: string;
    url: string;
  };
  type TeamsListForAuthenticatedUserResponseItem = {
    created_at: string;
    description: string;
    html_url: string;
    id: number;
    members_count: number;
    members_url: string;
    name: string;
    node_id: string;
    organization: TeamsListForAuthenticatedUserResponseItemOrganization;
    parent: null;
    permission: string;
    privacy: string;
    repos_count: number;
    repositories_url: string;
    slug: string;
    updated_at: string;
    url: string;
  };
  type TeamsListDiscussionsLegacyResponseItemReactions = {
    "+1": number;
    "-1": number;
    confused: number;
    heart: number;
    hooray: number;
    laugh: number;
    total_count: number;
    url: string;
  };
  type TeamsListDiscussionsLegacyResponseItemAuthor = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type TeamsListDiscussionsLegacyResponseItem = {
    author: TeamsListDiscussionsLegacyResponseItemAuthor;
    body: string;
    body_html: string;
    body_version: string;
    comments_count: number;
    comments_url: string;
    created_at: string;
    html_url: string;
    last_edited_at: null;
    node_id: string;
    number: number;
    pinned: boolean;
    private: boolean;
    reactions: TeamsListDiscussionsLegacyResponseItemReactions;
    team_url: string;
    title: string;
    updated_at: string;
    url: string;
  };
  type TeamsListDiscussionsInOrgResponseItemReactions = {
    "+1": number;
    "-1": number;
    confused: number;
    heart: number;
    hooray: number;
    laugh: number;
    total_count: number;
    url: string;
  };
  type TeamsListDiscussionsInOrgResponseItemAuthor = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type TeamsListDiscussionsInOrgResponseItem = {
    author: TeamsListDiscussionsInOrgResponseItemAuthor;
    body: string;
    body_html: string;
    body_version: string;
    comments_count: number;
    comments_url: string;
    created_at: string;
    html_url: string;
    last_edited_at: null;
    node_id: string;
    number: number;
    pinned: boolean;
    private: boolean;
    reactions: TeamsListDiscussionsInOrgResponseItemReactions;
    team_url: string;
    title: string;
    updated_at: string;
    url: string;
  };
  type TeamsListDiscussionsResponseItemReactions = {
    "+1": number;
    "-1": number;
    confused: number;
    heart: number;
    hooray: number;
    laugh: number;
    total_count: number;
    url: string;
  };
  type TeamsListDiscussionsResponseItemAuthor = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type TeamsListDiscussionsResponseItem = {
    author: TeamsListDiscussionsResponseItemAuthor;
    body: string;
    body_html: string;
    body_version: string;
    comments_count: number;
    comments_url: string;
    created_at: string;
    html_url: string;
    last_edited_at: null;
    node_id: string;
    number: number;
    pinned: boolean;
    private: boolean;
    reactions: TeamsListDiscussionsResponseItemReactions;
    team_url: string;
    title: string;
    updated_at: string;
    url: string;
  };
  type TeamsListDiscussionCommentsLegacyResponseItemReactions = {
    "+1": number;
    "-1": number;
    confused: number;
    heart: number;
    hooray: number;
    laugh: number;
    total_count: number;
    url: string;
  };
  type TeamsListDiscussionCommentsLegacyResponseItemAuthor = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type TeamsListDiscussionCommentsLegacyResponseItem = {
    author: TeamsListDiscussionCommentsLegacyResponseItemAuthor;
    body: string;
    body_html: string;
    body_version: string;
    created_at: string;
    discussion_url: string;
    html_url: string;
    last_edited_at: null;
    node_id: string;
    number: number;
    reactions: TeamsListDiscussionCommentsLegacyResponseItemReactions;
    updated_at: string;
    url: string;
  };
  type TeamsListDiscussionCommentsInOrgResponseItemReactions = {
    "+1": number;
    "-1": number;
    confused: number;
    heart: number;
    hooray: number;
    laugh: number;
    total_count: number;
    url: string;
  };
  type TeamsListDiscussionCommentsInOrgResponseItemAuthor = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type TeamsListDiscussionCommentsInOrgResponseItem = {
    author: TeamsListDiscussionCommentsInOrgResponseItemAuthor;
    body: string;
    body_html: string;
    body_version: string;
    created_at: string;
    discussion_url: string;
    html_url: string;
    last_edited_at: null;
    node_id: string;
    number: number;
    reactions: TeamsListDiscussionCommentsInOrgResponseItemReactions;
    updated_at: string;
    url: string;
  };
  type TeamsListDiscussionCommentsResponseItemReactions = {
    "+1": number;
    "-1": number;
    confused: number;
    heart: number;
    hooray: number;
    laugh: number;
    total_count: number;
    url: string;
  };
  type TeamsListDiscussionCommentsResponseItemAuthor = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type TeamsListDiscussionCommentsResponseItem = {
    author: TeamsListDiscussionCommentsResponseItemAuthor;
    body: string;
    body_html: string;
    body_version: string;
    created_at: string;
    discussion_url: string;
    html_url: string;
    last_edited_at: null;
    node_id: string;
    number: number;
    reactions: TeamsListDiscussionCommentsResponseItemReactions;
    updated_at: string;
    url: string;
  };
  type TeamsListChildLegacyResponseItemParent = {
    description: string;
    html_url: string;
    id: number;
    members_url: string;
    name: string;
    node_id: string;
    permission: string;
    privacy: string;
    repositories_url: string;
    slug: string;
    url: string;
  };
  type TeamsListChildLegacyResponseItem = {
    description: string;
    id: number;
    members_url: string;
    name: string;
    node_id: string;
    parent: TeamsListChildLegacyResponseItemParent;
    permission: string;
    privacy: string;
    repositories_url: string;
    slug: string;
    url: string;
  };
  type TeamsListChildInOrgResponseItemParent = {
    description: string;
    html_url: string;
    id: number;
    members_url: string;
    name: string;
    node_id: string;
    permission: string;
    privacy: string;
    repositories_url: string;
    slug: string;
    url: string;
  };
  type TeamsListChildInOrgResponseItem = {
    description: string;
    id: number;
    members_url: string;
    name: string;
    node_id: string;
    parent: TeamsListChildInOrgResponseItemParent;
    permission: string;
    privacy: string;
    repositories_url: string;
    slug: string;
    url: string;
  };
  type TeamsListChildResponseItemParent = {
    description: string;
    html_url: string;
    id: number;
    members_url: string;
    name: string;
    node_id: string;
    permission: string;
    privacy: string;
    repositories_url: string;
    slug: string;
    url: string;
  };
  type TeamsListChildResponseItem = {
    description: string;
    id: number;
    members_url: string;
    name: string;
    node_id: string;
    parent: TeamsListChildResponseItemParent;
    permission: string;
    privacy: string;
    repositories_url: string;
    slug: string;
    url: string;
  };
  type TeamsListResponseItem = {
    description: string;
    html_url: string;
    id: number;
    members_url: string;
    name: string;
    node_id: string;
    parent: null;
    permission: string;
    privacy: string;
    repositories_url: string;
    slug: string;
    url: string;
  };
  type TeamsGetMembershipLegacyResponse = {
    role: string;
    state: string;
    url: string;
  };
  type TeamsGetMembershipInOrgResponse = {
    role: string;
    state: string;
    url: string;
  };
  type TeamsGetMembershipResponse = {
    role: string;
    state: string;
    url: string;
  };
  type TeamsGetLegacyResponseOrganization = {
    avatar_url: string;
    blog: string;
    company: string;
    created_at: string;
    description: string;
    email: string;
    events_url: string;
    followers: number;
    following: number;
    has_organization_projects: boolean;
    has_repository_projects: boolean;
    hooks_url: string;
    html_url: string;
    id: number;
    is_verified: boolean;
    issues_url: string;
    location: string;
    login: string;
    members_url: string;
    name: string;
    node_id: string;
    public_gists: number;
    public_members_url: string;
    public_repos: number;
    repos_url: string;
    type: string;
    url: string;
  };
  type TeamsGetLegacyResponse = {
    created_at: string;
    description: string;
    html_url: string;
    id: number;
    members_count: number;
    members_url: string;
    name: string;
    node_id: string;
    organization: TeamsGetLegacyResponseOrganization;
    parent: null;
    permission: string;
    privacy: string;
    repos_count: number;
    repositories_url: string;
    slug: string;
    updated_at: string;
    url: string;
  };
  type TeamsGetDiscussionLegacyResponseReactions = {
    "+1": number;
    "-1": number;
    confused: number;
    heart: number;
    hooray: number;
    laugh: number;
    total_count: number;
    url: string;
  };
  type TeamsGetDiscussionLegacyResponseAuthor = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type TeamsGetDiscussionLegacyResponse = {
    author: TeamsGetDiscussionLegacyResponseAuthor;
    body: string;
    body_html: string;
    body_version: string;
    comments_count: number;
    comments_url: string;
    created_at: string;
    html_url: string;
    last_edited_at: null;
    node_id: string;
    number: number;
    pinned: boolean;
    private: boolean;
    reactions: TeamsGetDiscussionLegacyResponseReactions;
    team_url: string;
    title: string;
    updated_at: string;
    url: string;
  };
  type TeamsGetDiscussionInOrgResponseReactions = {
    "+1": number;
    "-1": number;
    confused: number;
    heart: number;
    hooray: number;
    laugh: number;
    total_count: number;
    url: string;
  };
  type TeamsGetDiscussionInOrgResponseAuthor = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type TeamsGetDiscussionInOrgResponse = {
    author: TeamsGetDiscussionInOrgResponseAuthor;
    body: string;
    body_html: string;
    body_version: string;
    comments_count: number;
    comments_url: string;
    created_at: string;
    html_url: string;
    last_edited_at: null;
    node_id: string;
    number: number;
    pinned: boolean;
    private: boolean;
    reactions: TeamsGetDiscussionInOrgResponseReactions;
    team_url: string;
    title: string;
    updated_at: string;
    url: string;
  };
  type TeamsGetDiscussionCommentLegacyResponseReactions = {
    "+1": number;
    "-1": number;
    confused: number;
    heart: number;
    hooray: number;
    laugh: number;
    total_count: number;
    url: string;
  };
  type TeamsGetDiscussionCommentLegacyResponseAuthor = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type TeamsGetDiscussionCommentLegacyResponse = {
    author: TeamsGetDiscussionCommentLegacyResponseAuthor;
    body: string;
    body_html: string;
    body_version: string;
    created_at: string;
    discussion_url: string;
    html_url: string;
    last_edited_at: null;
    node_id: string;
    number: number;
    reactions: TeamsGetDiscussionCommentLegacyResponseReactions;
    updated_at: string;
    url: string;
  };
  type TeamsGetDiscussionCommentInOrgResponseReactions = {
    "+1": number;
    "-1": number;
    confused: number;
    heart: number;
    hooray: number;
    laugh: number;
    total_count: number;
    url: string;
  };
  type TeamsGetDiscussionCommentInOrgResponseAuthor = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type TeamsGetDiscussionCommentInOrgResponse = {
    author: TeamsGetDiscussionCommentInOrgResponseAuthor;
    body: string;
    body_html: string;
    body_version: string;
    created_at: string;
    discussion_url: string;
    html_url: string;
    last_edited_at: null;
    node_id: string;
    number: number;
    reactions: TeamsGetDiscussionCommentInOrgResponseReactions;
    updated_at: string;
    url: string;
  };
  type TeamsGetDiscussionCommentResponseReactions = {
    "+1": number;
    "-1": number;
    confused: number;
    heart: number;
    hooray: number;
    laugh: number;
    total_count: number;
    url: string;
  };
  type TeamsGetDiscussionCommentResponseAuthor = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type TeamsGetDiscussionCommentResponse = {
    author: TeamsGetDiscussionCommentResponseAuthor;
    body: string;
    body_html: string;
    body_version: string;
    created_at: string;
    discussion_url: string;
    html_url: string;
    last_edited_at: null;
    node_id: string;
    number: number;
    reactions: TeamsGetDiscussionCommentResponseReactions;
    updated_at: string;
    url: string;
  };
  type TeamsGetDiscussionResponseReactions = {
    "+1": number;
    "-1": number;
    confused: number;
    heart: number;
    hooray: number;
    laugh: number;
    total_count: number;
    url: string;
  };
  type TeamsGetDiscussionResponseAuthor = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type TeamsGetDiscussionResponse = {
    author: TeamsGetDiscussionResponseAuthor;
    body: string;
    body_html: string;
    body_version: string;
    comments_count: number;
    comments_url: string;
    created_at: string;
    html_url: string;
    last_edited_at: null;
    node_id: string;
    number: number;
    pinned: boolean;
    private: boolean;
    reactions: TeamsGetDiscussionResponseReactions;
    team_url: string;
    title: string;
    updated_at: string;
    url: string;
  };
  type TeamsGetByNameResponseOrganization = {
    avatar_url: string;
    blog: string;
    company: string;
    created_at: string;
    description: string;
    email: string;
    events_url: string;
    followers: number;
    following: number;
    has_organization_projects: boolean;
    has_repository_projects: boolean;
    hooks_url: string;
    html_url: string;
    id: number;
    is_verified: boolean;
    issues_url: string;
    location: string;
    login: string;
    members_url: string;
    name: string;
    node_id: string;
    public_gists: number;
    public_members_url: string;
    public_repos: number;
    repos_url: string;
    type: string;
    url: string;
  };
  type TeamsGetByNameResponse = {
    created_at: string;
    description: string;
    html_url: string;
    id: number;
    members_count: number;
    members_url: string;
    name: string;
    node_id: string;
    organization: TeamsGetByNameResponseOrganization;
    parent: null;
    permission: string;
    privacy: string;
    repos_count: number;
    repositories_url: string;
    slug: string;
    updated_at: string;
    url: string;
  };
  type TeamsGetResponseOrganization = {
    avatar_url: string;
    blog: string;
    company: string;
    created_at: string;
    description: string;
    email: string;
    events_url: string;
    followers: number;
    following: number;
    has_organization_projects: boolean;
    has_repository_projects: boolean;
    hooks_url: string;
    html_url: string;
    id: number;
    is_verified: boolean;
    issues_url: string;
    location: string;
    login: string;
    members_url: string;
    name: string;
    node_id: string;
    public_gists: number;
    public_members_url: string;
    public_repos: number;
    repos_url: string;
    type: string;
    url: string;
  };
  type TeamsGetResponse = {
    created_at: string;
    description: string;
    html_url: string;
    id: number;
    members_count: number;
    members_url: string;
    name: string;
    node_id: string;
    organization: TeamsGetResponseOrganization;
    parent: null;
    permission: string;
    privacy: string;
    repos_count: number;
    repositories_url: string;
    slug: string;
    updated_at: string;
    url: string;
  };
  type TeamsCreateDiscussionLegacyResponseReactions = {
    "+1": number;
    "-1": number;
    confused: number;
    heart: number;
    hooray: number;
    laugh: number;
    total_count: number;
    url: string;
  };
  type TeamsCreateDiscussionLegacyResponseAuthor = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type TeamsCreateDiscussionLegacyResponse = {
    author: TeamsCreateDiscussionLegacyResponseAuthor;
    body: string;
    body_html: string;
    body_version: string;
    comments_count: number;
    comments_url: string;
    created_at: string;
    html_url: string;
    last_edited_at: null;
    node_id: string;
    number: number;
    pinned: boolean;
    private: boolean;
    reactions: TeamsCreateDiscussionLegacyResponseReactions;
    team_url: string;
    title: string;
    updated_at: string;
    url: string;
  };
  type TeamsCreateDiscussionInOrgResponseReactions = {
    "+1": number;
    "-1": number;
    confused: number;
    heart: number;
    hooray: number;
    laugh: number;
    total_count: number;
    url: string;
  };
  type TeamsCreateDiscussionInOrgResponseAuthor = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type TeamsCreateDiscussionInOrgResponse = {
    author: TeamsCreateDiscussionInOrgResponseAuthor;
    body: string;
    body_html: string;
    body_version: string;
    comments_count: number;
    comments_url: string;
    created_at: string;
    html_url: string;
    last_edited_at: null;
    node_id: string;
    number: number;
    pinned: boolean;
    private: boolean;
    reactions: TeamsCreateDiscussionInOrgResponseReactions;
    team_url: string;
    title: string;
    updated_at: string;
    url: string;
  };
  type TeamsCreateDiscussionCommentLegacyResponseReactions = {
    "+1": number;
    "-1": number;
    confused: number;
    heart: number;
    hooray: number;
    laugh: number;
    total_count: number;
    url: string;
  };
  type TeamsCreateDiscussionCommentLegacyResponseAuthor = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type TeamsCreateDiscussionCommentLegacyResponse = {
    author: TeamsCreateDiscussionCommentLegacyResponseAuthor;
    body: string;
    body_html: string;
    body_version: string;
    created_at: string;
    discussion_url: string;
    html_url: string;
    last_edited_at: null;
    node_id: string;
    number: number;
    reactions: TeamsCreateDiscussionCommentLegacyResponseReactions;
    updated_at: string;
    url: string;
  };
  type TeamsCreateDiscussionCommentInOrgResponseReactions = {
    "+1": number;
    "-1": number;
    confused: number;
    heart: number;
    hooray: number;
    laugh: number;
    total_count: number;
    url: string;
  };
  type TeamsCreateDiscussionCommentInOrgResponseAuthor = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type TeamsCreateDiscussionCommentInOrgResponse = {
    author: TeamsCreateDiscussionCommentInOrgResponseAuthor;
    body: string;
    body_html: string;
    body_version: string;
    created_at: string;
    discussion_url: string;
    html_url: string;
    last_edited_at: null;
    node_id: string;
    number: number;
    reactions: TeamsCreateDiscussionCommentInOrgResponseReactions;
    updated_at: string;
    url: string;
  };
  type TeamsCreateDiscussionCommentResponseReactions = {
    "+1": number;
    "-1": number;
    confused: number;
    heart: number;
    hooray: number;
    laugh: number;
    total_count: number;
    url: string;
  };
  type TeamsCreateDiscussionCommentResponseAuthor = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type TeamsCreateDiscussionCommentResponse = {
    author: TeamsCreateDiscussionCommentResponseAuthor;
    body: string;
    body_html: string;
    body_version: string;
    created_at: string;
    discussion_url: string;
    html_url: string;
    last_edited_at: null;
    node_id: string;
    number: number;
    reactions: TeamsCreateDiscussionCommentResponseReactions;
    updated_at: string;
    url: string;
  };
  type TeamsCreateDiscussionResponseReactions = {
    "+1": number;
    "-1": number;
    confused: number;
    heart: number;
    hooray: number;
    laugh: number;
    total_count: number;
    url: string;
  };
  type TeamsCreateDiscussionResponseAuthor = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type TeamsCreateDiscussionResponse = {
    author: TeamsCreateDiscussionResponseAuthor;
    body: string;
    body_html: string;
    body_version: string;
    comments_count: number;
    comments_url: string;
    created_at: string;
    html_url: string;
    last_edited_at: null;
    node_id: string;
    number: number;
    pinned: boolean;
    private: boolean;
    reactions: TeamsCreateDiscussionResponseReactions;
    team_url: string;
    title: string;
    updated_at: string;
    url: string;
  };
  type TeamsCreateResponseOrganization = {
    avatar_url: string;
    blog: string;
    company: string;
    created_at: string;
    description: string;
    email: string;
    events_url: string;
    followers: number;
    following: number;
    has_organization_projects: boolean;
    has_repository_projects: boolean;
    hooks_url: string;
    html_url: string;
    id: number;
    is_verified: boolean;
    issues_url: string;
    location: string;
    login: string;
    members_url: string;
    name: string;
    node_id: string;
    public_gists: number;
    public_members_url: string;
    public_repos: number;
    repos_url: string;
    type: string;
    url: string;
  };
  type TeamsCreateResponse = {
    created_at: string;
    description: string;
    html_url: string;
    id: number;
    members_count: number;
    members_url: string;
    name: string;
    node_id: string;
    organization: TeamsCreateResponseOrganization;
    parent: null;
    permission: string;
    privacy: string;
    repos_count: number;
    repositories_url: string;
    slug: string;
    updated_at: string;
    url: string;
  };
  type TeamsCheckManagesRepoLegacyResponsePermissions = {
    admin: boolean;
    pull: boolean;
    push: boolean;
  };
  type TeamsCheckManagesRepoLegacyResponseOwner = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type TeamsCheckManagesRepoLegacyResponse = {
    allow_merge_commit: boolean;
    allow_rebase_merge: boolean;
    allow_squash_merge: boolean;
    archive_url: string;
    archived: boolean;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    clone_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    created_at: string;
    default_branch: string;
    deployments_url: string;
    description: string;
    disabled: boolean;
    downloads_url: string;
    events_url: string;
    fork: boolean;
    forks_count: number;
    forks_url: string;
    full_name: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    has_downloads: boolean;
    has_issues: boolean;
    has_pages: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    homepage: string;
    hooks_url: string;
    html_url: string;
    id: number;
    is_template: boolean;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    language: null;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    mirror_url: string;
    name: string;
    network_count: number;
    node_id: string;
    notifications_url: string;
    open_issues_count: number;
    owner: TeamsCheckManagesRepoLegacyResponseOwner;
    permissions: TeamsCheckManagesRepoLegacyResponsePermissions;
    private: boolean;
    pulls_url: string;
    pushed_at: string;
    releases_url: string;
    size: number;
    ssh_url: string;
    stargazers_count: number;
    stargazers_url: string;
    statuses_url: string;
    subscribers_count: number;
    subscribers_url: string;
    subscription_url: string;
    svn_url: string;
    tags_url: string;
    teams_url: string;
    temp_clone_token: string;
    template_repository: null;
    topics: Array<string>;
    trees_url: string;
    updated_at: string;
    url: string;
    visibility: string;
    watchers_count: number;
  };
  type TeamsCheckManagesRepoInOrgResponsePermissions = {
    admin: boolean;
    pull: boolean;
    push: boolean;
  };
  type TeamsCheckManagesRepoInOrgResponseOwner = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type TeamsCheckManagesRepoInOrgResponse = {
    allow_merge_commit: boolean;
    allow_rebase_merge: boolean;
    allow_squash_merge: boolean;
    archive_url: string;
    archived: boolean;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    clone_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    created_at: string;
    default_branch: string;
    deployments_url: string;
    description: string;
    disabled: boolean;
    downloads_url: string;
    events_url: string;
    fork: boolean;
    forks_count: number;
    forks_url: string;
    full_name: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    has_downloads: boolean;
    has_issues: boolean;
    has_pages: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    homepage: string;
    hooks_url: string;
    html_url: string;
    id: number;
    is_template: boolean;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    language: null;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    mirror_url: string;
    name: string;
    network_count: number;
    node_id: string;
    notifications_url: string;
    open_issues_count: number;
    owner: TeamsCheckManagesRepoInOrgResponseOwner;
    permissions: TeamsCheckManagesRepoInOrgResponsePermissions;
    private: boolean;
    pulls_url: string;
    pushed_at: string;
    releases_url: string;
    size: number;
    ssh_url: string;
    stargazers_count: number;
    stargazers_url: string;
    statuses_url: string;
    subscribers_count: number;
    subscribers_url: string;
    subscription_url: string;
    svn_url: string;
    tags_url: string;
    teams_url: string;
    temp_clone_token: string;
    template_repository: null;
    topics: Array<string>;
    trees_url: string;
    updated_at: string;
    url: string;
    visibility: string;
    watchers_count: number;
  };
  type TeamsCheckManagesRepoResponsePermissions = {
    admin: boolean;
    pull: boolean;
    push: boolean;
  };
  type TeamsCheckManagesRepoResponseOwner = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type TeamsCheckManagesRepoResponse = {
    allow_merge_commit: boolean;
    allow_rebase_merge: boolean;
    allow_squash_merge: boolean;
    archive_url: string;
    archived: boolean;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    clone_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    created_at: string;
    default_branch: string;
    deployments_url: string;
    description: string;
    disabled: boolean;
    downloads_url: string;
    events_url: string;
    fork: boolean;
    forks_count: number;
    forks_url: string;
    full_name: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    has_downloads: boolean;
    has_issues: boolean;
    has_pages: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    homepage: string;
    hooks_url: string;
    html_url: string;
    id: number;
    is_template: boolean;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    language: null;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    mirror_url: string;
    name: string;
    network_count: number;
    node_id: string;
    notifications_url: string;
    open_issues_count: number;
    owner: TeamsCheckManagesRepoResponseOwner;
    permissions: TeamsCheckManagesRepoResponsePermissions;
    private: boolean;
    pulls_url: string;
    pushed_at: string;
    releases_url: string;
    size: number;
    ssh_url: string;
    stargazers_count: number;
    stargazers_url: string;
    statuses_url: string;
    subscribers_count: number;
    subscribers_url: string;
    subscription_url: string;
    svn_url: string;
    tags_url: string;
    teams_url: string;
    temp_clone_token: string;
    template_repository: null;
    topics: Array<string>;
    trees_url: string;
    updated_at: string;
    url: string;
    visibility: string;
    watchers_count: number;
  };
  type TeamsAddOrUpdateProjectLegacyResponse = {
    documentation_url: string;
    message: string;
  };
  type TeamsAddOrUpdateProjectInOrgResponse = {
    documentation_url: string;
    message: string;
  };
  type TeamsAddOrUpdateProjectResponse = {
    documentation_url: string;
    message: string;
  };
  type TeamsAddOrUpdateMembershipLegacyResponse = {
    role: string;
    state: string;
    url: string;
  };
  type TeamsAddOrUpdateMembershipInOrgResponse = {
    role: string;
    state: string;
    url: string;
  };
  type TeamsAddOrUpdateMembershipResponse = {
    role: string;
    state: string;
    url: string;
  };
  type TeamsAddMemberLegacyResponseErrorsItem = {
    code: string;
    field: string;
    resource: string;
  };
  type TeamsAddMemberLegacyResponse = {
    errors: Array<TeamsAddMemberLegacyResponseErrorsItem>;
    message: string;
  };
  type TeamsAddMemberResponseErrorsItem = {
    code: string;
    field: string;
    resource: string;
  };
  type TeamsAddMemberResponse = {
    errors: Array<TeamsAddMemberResponseErrorsItem>;
    message: string;
  };
  type SearchUsersLegacyResponseUsersItem = {
    created: string;
    created_at: string;
    followers: number;
    followers_count: number;
    fullname: string;
    gravatar_id: string;
    id: string;
    language: string;
    location: string;
    login: string;
    name: string;
    public_repo_count: number;
    repos: number;
    score: number;
    type: string;
    username: string;
  };
  type SearchUsersLegacyResponse = {
    users: Array<SearchUsersLegacyResponseUsersItem>;
  };
  type SearchUsersResponseItemsItem = {
    avatar_url: string;
    followers_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    score: number;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type SearchUsersResponse = {
    incomplete_results: boolean;
    items: Array<SearchUsersResponseItemsItem>;
    total_count: number;
  };
  type SearchTopicsResponseItemsItem = {
    created_at: string;
    created_by: string;
    curated: boolean;
    description: string;
    display_name: string;
    featured: boolean;
    name: string;
    released: string;
    score: number;
    short_description: string;
    updated_at: string;
  };
  type SearchTopicsResponse = {
    incomplete_results: boolean;
    items: Array<SearchTopicsResponseItemsItem>;
    total_count: number;
  };
  type SearchReposLegacyResponseRepositoriesItem = {
    created: string;
    created_at: string;
    description: string;
    followers: number;
    fork: boolean;
    forks: number;
    has_downloads: boolean;
    has_issues: boolean;
    has_wiki: boolean;
    homepage: string;
    language: string;
    name: string;
    open_issues: number;
    owner: string;
    private: boolean;
    pushed: string;
    pushed_at: string;
    score: number;
    size: number;
    type: string;
    url: string;
    username: string;
    watchers: number;
  };
  type SearchReposLegacyResponse = {
    repositories: Array<SearchReposLegacyResponseRepositoriesItem>;
  };
  type SearchReposResponseItemsItemOwner = {
    avatar_url: string;
    gravatar_id: string;
    id: number;
    login: string;
    node_id: string;
    received_events_url: string;
    type: string;
    url: string;
  };
  type SearchReposResponseItemsItem = {
    created_at: string;
    default_branch: string;
    description: string;
    fork: boolean;
    forks_count: number;
    full_name: string;
    homepage: string;
    html_url: string;
    id: number;
    language: string;
    master_branch: string;
    name: string;
    node_id: string;
    open_issues_count: number;
    owner: SearchReposResponseItemsItemOwner;
    private: boolean;
    pushed_at: string;
    score: number;
    size: number;
    stargazers_count: number;
    updated_at: string;
    url: string;
    watchers_count: number;
  };
  type SearchReposResponse = {
    incomplete_results: boolean;
    items: Array<SearchReposResponseItemsItem>;
    total_count: number;
  };
  type SearchLabelsResponseItemsItem = {
    color: string;
    default: boolean;
    description: string;
    id: number;
    name: string;
    node_id: string;
    score: number;
    url: string;
  };
  type SearchLabelsResponse = {
    incomplete_results: boolean;
    items: Array<SearchLabelsResponseItemsItem>;
    total_count: number;
  };
  type SearchIssuesLegacyResponseIssuesItem = {
    body: string;
    comments: number;
    created_at: string;
    gravatar_id: string;
    html_url: string;
    labels: Array<string>;
    number: number;
    position: number;
    state: string;
    title: string;
    updated_at: string;
    user: string;
    votes: number;
  };
  type SearchIssuesLegacyResponse = {
    issues: Array<SearchIssuesLegacyResponseIssuesItem>;
  };
  type SearchIssuesAndPullRequestsResponseItemsItemUser = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type SearchIssuesAndPullRequestsResponseItemsItemPullRequest = {
    diff_url: null;
    html_url: null;
    patch_url: null;
  };
  type SearchIssuesAndPullRequestsResponseItemsItemLabelsItem = {
    color: string;
    id: number;
    name: string;
    node_id: string;
    url: string;
  };
  type SearchIssuesAndPullRequestsResponseItemsItem = {
    assignee: null;
    body: string;
    closed_at: null;
    comments: number;
    comments_url: string;
    created_at: string;
    events_url: string;
    html_url: string;
    id: number;
    labels: Array<SearchIssuesAndPullRequestsResponseItemsItemLabelsItem>;
    labels_url: string;
    milestone: null;
    node_id: string;
    number: number;
    pull_request: SearchIssuesAndPullRequestsResponseItemsItemPullRequest;
    repository_url: string;
    score: number;
    state: string;
    title: string;
    updated_at: string;
    url: string;
    user: SearchIssuesAndPullRequestsResponseItemsItemUser;
  };
  type SearchIssuesAndPullRequestsResponse = {
    incomplete_results: boolean;
    items: Array<SearchIssuesAndPullRequestsResponseItemsItem>;
    total_count: number;
  };
  type SearchIssuesResponseItemsItemUser = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type SearchIssuesResponseItemsItemPullRequest = {
    diff_url: null;
    html_url: null;
    patch_url: null;
  };
  type SearchIssuesResponseItemsItemLabelsItem = {
    color: string;
    id: number;
    name: string;
    node_id: string;
    url: string;
  };
  type SearchIssuesResponseItemsItem = {
    assignee: null;
    body: string;
    closed_at: null;
    comments: number;
    comments_url: string;
    created_at: string;
    events_url: string;
    html_url: string;
    id: number;
    labels: Array<SearchIssuesResponseItemsItemLabelsItem>;
    labels_url: string;
    milestone: null;
    node_id: string;
    number: number;
    pull_request: SearchIssuesResponseItemsItemPullRequest;
    repository_url: string;
    score: number;
    state: string;
    title: string;
    updated_at: string;
    url: string;
    user: SearchIssuesResponseItemsItemUser;
  };
  type SearchIssuesResponse = {
    incomplete_results: boolean;
    items: Array<SearchIssuesResponseItemsItem>;
    total_count: number;
  };
  type SearchEmailLegacyResponseUser = {
    blog: string;
    company: string;
    created: string;
    created_at: string;
    email: string;
    followers_count: number;
    following_count: number;
    gravatar_id: string;
    id: number;
    location: string;
    login: string;
    name: string;
    public_gist_count: number;
    public_repo_count: number;
    type: string;
  };
  type SearchEmailLegacyResponse = { user: SearchEmailLegacyResponseUser };
  type SearchCommitsResponseItemsItemRepositoryOwner = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type SearchCommitsResponseItemsItemRepository = {
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    description: string;
    downloads_url: string;
    events_url: string;
    fork: boolean;
    forks_url: string;
    full_name: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    hooks_url: string;
    html_url: string;
    id: number;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    name: string;
    node_id: string;
    notifications_url: string;
    owner: SearchCommitsResponseItemsItemRepositoryOwner;
    private: boolean;
    pulls_url: string;
    releases_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    url: string;
  };
  type SearchCommitsResponseItemsItemParentsItem = {
    html_url: string;
    sha: string;
    url: string;
  };
  type SearchCommitsResponseItemsItemCommitter = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type SearchCommitsResponseItemsItemCommitTree = { sha: string; url: string };
  type SearchCommitsResponseItemsItemCommitCommitter = {
    date: string;
    email: string;
    name: string;
  };
  type SearchCommitsResponseItemsItemCommitAuthor = {
    date: string;
    email: string;
    name: string;
  };
  type SearchCommitsResponseItemsItemCommit = {
    author: SearchCommitsResponseItemsItemCommitAuthor;
    comment_count: number;
    committer: SearchCommitsResponseItemsItemCommitCommitter;
    message: string;
    tree: SearchCommitsResponseItemsItemCommitTree;
    url: string;
  };
  type SearchCommitsResponseItemsItemAuthor = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type SearchCommitsResponseItemsItem = {
    author: SearchCommitsResponseItemsItemAuthor;
    comments_url: string;
    commit: SearchCommitsResponseItemsItemCommit;
    committer: SearchCommitsResponseItemsItemCommitter;
    html_url: string;
    parents: Array<SearchCommitsResponseItemsItemParentsItem>;
    repository: SearchCommitsResponseItemsItemRepository;
    score: number;
    sha: string;
    url: string;
  };
  type SearchCommitsResponse = {
    incomplete_results: boolean;
    items: Array<SearchCommitsResponseItemsItem>;
    total_count: number;
  };
  type SearchCodeResponseItemsItemRepositoryOwner = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type SearchCodeResponseItemsItemRepository = {
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    description: string;
    downloads_url: string;
    events_url: string;
    fork: boolean;
    forks_url: string;
    full_name: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    hooks_url: string;
    html_url: string;
    id: number;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    name: string;
    node_id: string;
    notifications_url: string;
    owner: SearchCodeResponseItemsItemRepositoryOwner;
    private: boolean;
    pulls_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    url: string;
  };
  type SearchCodeResponseItemsItem = {
    git_url: string;
    html_url: string;
    name: string;
    path: string;
    repository: SearchCodeResponseItemsItemRepository;
    score: number;
    sha: string;
    url: string;
  };
  type SearchCodeResponse = {
    incomplete_results: boolean;
    items: Array<SearchCodeResponseItemsItem>;
    total_count: number;
  };
  type ReposUploadReleaseAssetResponseValueUploader = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type ReposUploadReleaseAssetResponseValue = {
    browser_download_url: string;
    content_type: string;
    created_at: string;
    download_count: number;
    id: number;
    label: string;
    name: string;
    node_id: string;
    size: number;
    state: string;
    updated_at: string;
    uploader: ReposUploadReleaseAssetResponseValueUploader;
    url: string;
  };
  type ReposUploadReleaseAssetResponse = {
    value: ReposUploadReleaseAssetResponseValue;
  };
  type ReposUpdateReleaseAssetResponseUploader = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type ReposUpdateReleaseAssetResponse = {
    browser_download_url: string;
    content_type: string;
    created_at: string;
    download_count: number;
    id: number;
    label: string;
    name: string;
    node_id: string;
    size: number;
    state: string;
    updated_at: string;
    uploader: ReposUpdateReleaseAssetResponseUploader;
    url: string;
  };
  type ReposUpdateReleaseResponseAuthor = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type ReposUpdateReleaseResponseAssetsItemUploader = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type ReposUpdateReleaseResponseAssetsItem = {
    browser_download_url: string;
    content_type: string;
    created_at: string;
    download_count: number;
    id: number;
    label: string;
    name: string;
    node_id: string;
    size: number;
    state: string;
    updated_at: string;
    uploader: ReposUpdateReleaseResponseAssetsItemUploader;
    url: string;
  };
  type ReposUpdateReleaseResponse = {
    assets: Array<ReposUpdateReleaseResponseAssetsItem>;
    assets_url: string;
    author: ReposUpdateReleaseResponseAuthor;
    body: string;
    created_at: string;
    draft: boolean;
    html_url: string;
    id: number;
    name: string;
    node_id: string;
    prerelease: boolean;
    published_at: string;
    tag_name: string;
    tarball_url: string;
    target_commitish: string;
    upload_url: string;
    url: string;
    zipball_url: string;
  };
  type ReposUpdateProtectedBranchRequiredStatusChecksResponse = {
    contexts: Array<string>;
    contexts_url: string;
    strict: boolean;
    url: string;
  };
  type ReposUpdateProtectedBranchPullRequestReviewEnforcementResponseDismissalRestrictionsUsersItem = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type ReposUpdateProtectedBranchPullRequestReviewEnforcementResponseDismissalRestrictionsTeamsItem = {
    description: string;
    html_url: string;
    id: number;
    members_url: string;
    name: string;
    node_id: string;
    parent: null;
    permission: string;
    privacy: string;
    repositories_url: string;
    slug: string;
    url: string;
  };
  type ReposUpdateProtectedBranchPullRequestReviewEnforcementResponseDismissalRestrictions = {
    teams: Array<
      ReposUpdateProtectedBranchPullRequestReviewEnforcementResponseDismissalRestrictionsTeamsItem
    >;
    teams_url: string;
    url: string;
    users: Array<
      ReposUpdateProtectedBranchPullRequestReviewEnforcementResponseDismissalRestrictionsUsersItem
    >;
    users_url: string;
  };
  type ReposUpdateProtectedBranchPullRequestReviewEnforcementResponse = {
    dismiss_stale_reviews: boolean;
    dismissal_restrictions: ReposUpdateProtectedBranchPullRequestReviewEnforcementResponseDismissalRestrictions;
    require_code_owner_reviews: boolean;
    required_approving_review_count: number;
    url: string;
  };
  type ReposUpdateInvitationResponseRepositoryOwner = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type ReposUpdateInvitationResponseRepository = {
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    description: string;
    downloads_url: string;
    events_url: string;
    fork: boolean;
    forks_url: string;
    full_name: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    html_url: string;
    id: number;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    name: string;
    node_id: string;
    notifications_url: string;
    owner: ReposUpdateInvitationResponseRepositoryOwner;
    private: boolean;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    url: string;
  };
  type ReposUpdateInvitationResponseInviter = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type ReposUpdateInvitationResponseInvitee = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type ReposUpdateInvitationResponse = {
    created_at: string;
    html_url: string;
    id: number;
    invitee: ReposUpdateInvitationResponseInvitee;
    inviter: ReposUpdateInvitationResponseInviter;
    permissions: string;
    repository: ReposUpdateInvitationResponseRepository;
    url: string;
  };
  type ReposUpdateHookResponseLastResponse = {
    code: null;
    message: null;
    status: string;
  };
  type ReposUpdateHookResponseConfig = {
    content_type: string;
    insecure_ssl: string;
    url: string;
  };
  type ReposUpdateHookResponse = {
    active: boolean;
    config: ReposUpdateHookResponseConfig;
    created_at: string;
    events: Array<string>;
    id: number;
    last_response: ReposUpdateHookResponseLastResponse;
    name: string;
    ping_url: string;
    test_url: string;
    type: string;
    updated_at: string;
    url: string;
  };
  type ReposUpdateFileResponseContentLinks = {
    git: string;
    html: string;
    self: string;
  };
  type ReposUpdateFileResponseContent = {
    _links: ReposUpdateFileResponseContentLinks;
    download_url: string;
    git_url: string;
    html_url: string;
    name: string;
    path: string;
    sha: string;
    size: number;
    type: string;
    url: string;
  };
  type ReposUpdateFileResponseCommitVerification = {
    payload: null;
    reason: string;
    signature: null;
    verified: boolean;
  };
  type ReposUpdateFileResponseCommitTree = { sha: string; url: string };
  type ReposUpdateFileResponseCommitParentsItem = {
    html_url: string;
    sha: string;
    url: string;
  };
  type ReposUpdateFileResponseCommitCommitter = {
    date: string;
    email: string;
    name: string;
  };
  type ReposUpdateFileResponseCommitAuthor = {
    date: string;
    email: string;
    name: string;
  };
  type ReposUpdateFileResponseCommit = {
    author: ReposUpdateFileResponseCommitAuthor;
    committer: ReposUpdateFileResponseCommitCommitter;
    html_url: string;
    message: string;
    node_id: string;
    parents: Array<ReposUpdateFileResponseCommitParentsItem>;
    sha: string;
    tree: ReposUpdateFileResponseCommitTree;
    url: string;
    verification: ReposUpdateFileResponseCommitVerification;
  };
  type ReposUpdateFileResponse = {
    commit: ReposUpdateFileResponseCommit;
    content: ReposUpdateFileResponseContent;
  };
  type ReposUpdateCommitCommentResponseUser = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type ReposUpdateCommitCommentResponse = {
    body: string;
    commit_id: string;
    created_at: string;
    html_url: string;
    id: number;
    line: number;
    node_id: string;
    path: string;
    position: number;
    updated_at: string;
    url: string;
    user: ReposUpdateCommitCommentResponseUser;
  };
  type ReposUpdateBranchProtectionResponseRestrictionsUsersItem = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type ReposUpdateBranchProtectionResponseRestrictionsTeamsItem = {
    description: string;
    html_url: string;
    id: number;
    members_url: string;
    name: string;
    node_id: string;
    parent: null;
    permission: string;
    privacy: string;
    repositories_url: string;
    slug: string;
    url: string;
  };
  type ReposUpdateBranchProtectionResponseRestrictionsAppsItemPermissions = {
    contents: string;
    issues: string;
    metadata: string;
    single_file: string;
  };
  type ReposUpdateBranchProtectionResponseRestrictionsAppsItemOwner = {
    avatar_url: string;
    description: string;
    events_url: string;
    hooks_url: string;
    id: number;
    issues_url: string;
    login: string;
    members_url: string;
    node_id: string;
    public_members_url: string;
    repos_url: string;
    url: string;
  };
  type ReposUpdateBranchProtectionResponseRestrictionsAppsItem = {
    created_at: string;
    description: string;
    events: Array<string>;
    external_url: string;
    html_url: string;
    id: number;
    name: string;
    node_id: string;
    owner: ReposUpdateBranchProtectionResponseRestrictionsAppsItemOwner;
    permissions: ReposUpdateBranchProtectionResponseRestrictionsAppsItemPermissions;
    slug: string;
    updated_at: string;
  };
  type ReposUpdateBranchProtectionResponseRestrictions = {
    apps: Array<ReposUpdateBranchProtectionResponseRestrictionsAppsItem>;
    apps_url: string;
    teams: Array<ReposUpdateBranchProtectionResponseRestrictionsTeamsItem>;
    teams_url: string;
    url: string;
    users: Array<ReposUpdateBranchProtectionResponseRestrictionsUsersItem>;
    users_url: string;
  };
  type ReposUpdateBranchProtectionResponseRequiredStatusChecks = {
    contexts: Array<string>;
    contexts_url: string;
    strict: boolean;
    url: string;
  };
  type ReposUpdateBranchProtectionResponseRequiredPullRequestReviewsDismissalRestrictionsUsersItem = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type ReposUpdateBranchProtectionResponseRequiredPullRequestReviewsDismissalRestrictionsTeamsItem = {
    description: string;
    html_url: string;
    id: number;
    members_url: string;
    name: string;
    node_id: string;
    parent: null;
    permission: string;
    privacy: string;
    repositories_url: string;
    slug: string;
    url: string;
  };
  type ReposUpdateBranchProtectionResponseRequiredPullRequestReviewsDismissalRestrictions = {
    teams: Array<
      ReposUpdateBranchProtectionResponseRequiredPullRequestReviewsDismissalRestrictionsTeamsItem
    >;
    teams_url: string;
    url: string;
    users: Array<
      ReposUpdateBranchProtectionResponseRequiredPullRequestReviewsDismissalRestrictionsUsersItem
    >;
    users_url: string;
  };
  type ReposUpdateBranchProtectionResponseRequiredPullRequestReviews = {
    dismiss_stale_reviews: boolean;
    dismissal_restrictions: ReposUpdateBranchProtectionResponseRequiredPullRequestReviewsDismissalRestrictions;
    require_code_owner_reviews: boolean;
    required_approving_review_count: number;
    url: string;
  };
  type ReposUpdateBranchProtectionResponseRequiredLinearHistory = {
    enabled: boolean;
  };
  type ReposUpdateBranchProtectionResponseEnforceAdmins = {
    enabled: boolean;
    url: string;
  };
  type ReposUpdateBranchProtectionResponseAllowForcePushes = {
    enabled: boolean;
  };
  type ReposUpdateBranchProtectionResponseAllowDeletions = { enabled: boolean };
  type ReposUpdateBranchProtectionResponse = {
    allow_deletions: ReposUpdateBranchProtectionResponseAllowDeletions;
    allow_force_pushes: ReposUpdateBranchProtectionResponseAllowForcePushes;
    enforce_admins: ReposUpdateBranchProtectionResponseEnforceAdmins;
    required_linear_history: ReposUpdateBranchProtectionResponseRequiredLinearHistory;
    required_pull_request_reviews: ReposUpdateBranchProtectionResponseRequiredPullRequestReviews;
    required_status_checks: ReposUpdateBranchProtectionResponseRequiredStatusChecks;
    restrictions: ReposUpdateBranchProtectionResponseRestrictions;
    url: string;
  };
  type ReposUpdateResponseSourcePermissions = {
    admin: boolean;
    pull: boolean;
    push: boolean;
  };
  type ReposUpdateResponseSourceOwner = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type ReposUpdateResponseSource = {
    allow_merge_commit: boolean;
    allow_rebase_merge: boolean;
    allow_squash_merge: boolean;
    archive_url: string;
    archived: boolean;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    clone_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    created_at: string;
    default_branch: string;
    deployments_url: string;
    description: string;
    disabled: boolean;
    downloads_url: string;
    events_url: string;
    fork: boolean;
    forks_count: number;
    forks_url: string;
    full_name: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    has_downloads: boolean;
    has_issues: boolean;
    has_pages: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    homepage: string;
    hooks_url: string;
    html_url: string;
    id: number;
    is_template: boolean;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    language: null;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    mirror_url: string;
    name: string;
    network_count: number;
    node_id: string;
    notifications_url: string;
    open_issues_count: number;
    owner: ReposUpdateResponseSourceOwner;
    permissions: ReposUpdateResponseSourcePermissions;
    private: boolean;
    pulls_url: string;
    pushed_at: string;
    releases_url: string;
    size: number;
    ssh_url: string;
    stargazers_count: number;
    stargazers_url: string;
    statuses_url: string;
    subscribers_count: number;
    subscribers_url: string;
    subscription_url: string;
    svn_url: string;
    tags_url: string;
    teams_url: string;
    temp_clone_token: string;
    template_repository: null;
    topics: Array<string>;
    trees_url: string;
    updated_at: string;
    url: string;
    visibility: string;
    watchers_count: number;
  };
  type ReposUpdateResponsePermissions = {
    admin: boolean;
    pull: boolean;
    push: boolean;
  };
  type ReposUpdateResponseParentPermissions = {
    admin: boolean;
    pull: boolean;
    push: boolean;
  };
  type ReposUpdateResponseParentOwner = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type ReposUpdateResponseParent = {
    allow_merge_commit: boolean;
    allow_rebase_merge: boolean;
    allow_squash_merge: boolean;
    archive_url: string;
    archived: boolean;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    clone_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    created_at: string;
    default_branch: string;
    deployments_url: string;
    description: string;
    disabled: boolean;
    downloads_url: string;
    events_url: string;
    fork: boolean;
    forks_count: number;
    forks_url: string;
    full_name: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    has_downloads: boolean;
    has_issues: boolean;
    has_pages: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    homepage: string;
    hooks_url: string;
    html_url: string;
    id: number;
    is_template: boolean;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    language: null;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    mirror_url: string;
    name: string;
    network_count: number;
    node_id: string;
    notifications_url: string;
    open_issues_count: number;
    owner: ReposUpdateResponseParentOwner;
    permissions: ReposUpdateResponseParentPermissions;
    private: boolean;
    pulls_url: string;
    pushed_at: string;
    releases_url: string;
    size: number;
    ssh_url: string;
    stargazers_count: number;
    stargazers_url: string;
    statuses_url: string;
    subscribers_count: number;
    subscribers_url: string;
    subscription_url: string;
    svn_url: string;
    tags_url: string;
    teams_url: string;
    temp_clone_token: string;
    template_repository: null;
    topics: Array<string>;
    trees_url: string;
    updated_at: string;
    url: string;
    visibility: string;
    watchers_count: number;
  };
  type ReposUpdateResponseOwner = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type ReposUpdateResponseOrganization = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type ReposUpdateResponse = {
    allow_merge_commit: boolean;
    allow_rebase_merge: boolean;
    allow_squash_merge: boolean;
    archive_url: string;
    archived: boolean;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    clone_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    created_at: string;
    default_branch: string;
    deployments_url: string;
    description: string;
    disabled: boolean;
    downloads_url: string;
    events_url: string;
    fork: boolean;
    forks_count: number;
    forks_url: string;
    full_name: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    has_downloads: boolean;
    has_issues: boolean;
    has_pages: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    homepage: string;
    hooks_url: string;
    html_url: string;
    id: number;
    is_template: boolean;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    language: null;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    mirror_url: string;
    name: string;
    network_count: number;
    node_id: string;
    notifications_url: string;
    open_issues_count: number;
    organization: ReposUpdateResponseOrganization;
    owner: ReposUpdateResponseOwner;
    parent: ReposUpdateResponseParent;
    permissions: ReposUpdateResponsePermissions;
    private: boolean;
    pulls_url: string;
    pushed_at: string;
    releases_url: string;
    size: number;
    source: ReposUpdateResponseSource;
    ssh_url: string;
    stargazers_count: number;
    stargazers_url: string;
    statuses_url: string;
    subscribers_count: number;
    subscribers_url: string;
    subscription_url: string;
    svn_url: string;
    tags_url: string;
    teams_url: string;
    temp_clone_token: string;
    template_repository: null;
    topics: Array<string>;
    trees_url: string;
    updated_at: string;
    url: string;
    visibility: string;
    watchers_count: number;
  };
  type ReposTransferResponsePermissions = {
    admin: boolean;
    pull: boolean;
    push: boolean;
  };
  type ReposTransferResponseOwner = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type ReposTransferResponse = {
    allow_merge_commit: boolean;
    allow_rebase_merge: boolean;
    allow_squash_merge: boolean;
    archive_url: string;
    archived: boolean;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    clone_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    created_at: string;
    default_branch: string;
    deployments_url: string;
    description: string;
    disabled: boolean;
    downloads_url: string;
    events_url: string;
    fork: boolean;
    forks_count: number;
    forks_url: string;
    full_name: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    has_downloads: boolean;
    has_issues: boolean;
    has_pages: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    homepage: string;
    hooks_url: string;
    html_url: string;
    id: number;
    is_template: boolean;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    language: null;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    mirror_url: string;
    name: string;
    network_count: number;
    node_id: string;
    notifications_url: string;
    open_issues_count: number;
    owner: ReposTransferResponseOwner;
    permissions: ReposTransferResponsePermissions;
    private: boolean;
    pulls_url: string;
    pushed_at: string;
    releases_url: string;
    size: number;
    ssh_url: string;
    stargazers_count: number;
    stargazers_url: string;
    statuses_url: string;
    subscribers_count: number;
    subscribers_url: string;
    subscription_url: string;
    svn_url: string;
    tags_url: string;
    teams_url: string;
    temp_clone_token: string;
    template_repository: null;
    topics: Array<string>;
    trees_url: string;
    updated_at: string;
    url: string;
    visibility: string;
    watchers_count: number;
  };
  type ReposRetrieveCommunityProfileMetricsResponseFilesReadme = {
    html_url: string;
    url: string;
  };
  type ReposRetrieveCommunityProfileMetricsResponseFilesPullRequestTemplate = {
    html_url: string;
    url: string;
  };
  type ReposRetrieveCommunityProfileMetricsResponseFilesLicense = {
    html_url: string;
    key: string;
    name: string;
    spdx_id: string;
    url: string;
  };
  type ReposRetrieveCommunityProfileMetricsResponseFilesIssueTemplate = {
    html_url: string;
    url: string;
  };
  type ReposRetrieveCommunityProfileMetricsResponseFilesContributing = {
    html_url: string;
    url: string;
  };
  type ReposRetrieveCommunityProfileMetricsResponseFilesCodeOfConduct = {
    html_url: string;
    key: string;
    name: string;
    url: string;
  };
  type ReposRetrieveCommunityProfileMetricsResponseFiles = {
    code_of_conduct: ReposRetrieveCommunityProfileMetricsResponseFilesCodeOfConduct;
    contributing: ReposRetrieveCommunityProfileMetricsResponseFilesContributing;
    issue_template: ReposRetrieveCommunityProfileMetricsResponseFilesIssueTemplate;
    license: ReposRetrieveCommunityProfileMetricsResponseFilesLicense;
    pull_request_template: ReposRetrieveCommunityProfileMetricsResponseFilesPullRequestTemplate;
    readme: ReposRetrieveCommunityProfileMetricsResponseFilesReadme;
  };
  type ReposRetrieveCommunityProfileMetricsResponse = {
    description: string;
    documentation: boolean;
    files: ReposRetrieveCommunityProfileMetricsResponseFiles;
    health_percentage: number;
    updated_at: string;
  };
  type ReposRequestPageBuildResponse = { status: string; url: string };
  type ReposReplaceTopicsResponse = { names: Array<string> };
  type ReposReplaceProtectedBranchUserRestrictionsResponseItem = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type ReposReplaceProtectedBranchTeamRestrictionsResponseItem = {
    description: string;
    html_url: string;
    id: number;
    members_url: string;
    name: string;
    node_id: string;
    parent: null;
    permission: string;
    privacy: string;
    repositories_url: string;
    slug: string;
    url: string;
  };
  type ReposReplaceProtectedBranchAppRestrictionsResponseItemPermissions = {
    contents: string;
    issues: string;
    metadata: string;
    single_file: string;
  };
  type ReposReplaceProtectedBranchAppRestrictionsResponseItemOwner = {
    avatar_url: string;
    description: string;
    events_url: string;
    hooks_url: string;
    id: number;
    issues_url: string;
    login: string;
    members_url: string;
    node_id: string;
    public_members_url: string;
    repos_url: string;
    url: string;
  };
  type ReposReplaceProtectedBranchAppRestrictionsResponseItem = {
    created_at: string;
    description: string;
    events: Array<string>;
    external_url: string;
    html_url: string;
    id: number;
    name: string;
    node_id: string;
    owner: ReposReplaceProtectedBranchAppRestrictionsResponseItemOwner;
    permissions: ReposReplaceProtectedBranchAppRestrictionsResponseItemPermissions;
    slug: string;
    updated_at: string;
  };
  type ReposRemoveProtectedBranchUserRestrictionsResponseItem = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type ReposRemoveProtectedBranchTeamRestrictionsResponseItem = {
    description: string;
    html_url: string;
    id: number;
    members_url: string;
    name: string;
    node_id: string;
    parent: null;
    permission: string;
    privacy: string;
    repositories_url: string;
    slug: string;
    url: string;
  };
  type ReposRemoveProtectedBranchAppRestrictionsResponseItemPermissions = {
    contents: string;
    issues: string;
    metadata: string;
    single_file: string;
  };
  type ReposRemoveProtectedBranchAppRestrictionsResponseItemOwner = {
    avatar_url: string;
    description: string;
    events_url: string;
    hooks_url: string;
    id: number;
    issues_url: string;
    login: string;
    members_url: string;
    node_id: string;
    public_members_url: string;
    repos_url: string;
    url: string;
  };
  type ReposRemoveProtectedBranchAppRestrictionsResponseItem = {
    created_at: string;
    description: string;
    events: Array<string>;
    external_url: string;
    html_url: string;
    id: number;
    name: string;
    node_id: string;
    owner: ReposRemoveProtectedBranchAppRestrictionsResponseItemOwner;
    permissions: ReposRemoveProtectedBranchAppRestrictionsResponseItemPermissions;
    slug: string;
    updated_at: string;
  };
  type ReposMergeResponseParentsItem = { sha: string; url: string };
  type ReposMergeResponseCommitter = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type ReposMergeResponseCommitVerification = {
    payload: null;
    reason: string;
    signature: null;
    verified: boolean;
  };
  type ReposMergeResponseCommitTree = { sha: string; url: string };
  type ReposMergeResponseCommitCommitter = {
    date: string;
    email: string;
    name: string;
  };
  type ReposMergeResponseCommitAuthor = {
    date: string;
    email: string;
    name: string;
  };
  type ReposMergeResponseCommit = {
    author: ReposMergeResponseCommitAuthor;
    comment_count: number;
    committer: ReposMergeResponseCommitCommitter;
    message: string;
    tree: ReposMergeResponseCommitTree;
    url: string;
    verification: ReposMergeResponseCommitVerification;
  };
  type ReposMergeResponseAuthor = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type ReposMergeResponse = {
    author: ReposMergeResponseAuthor;
    comments_url: string;
    commit: ReposMergeResponseCommit;
    committer: ReposMergeResponseCommitter;
    html_url: string;
    node_id: string;
    parents: Array<ReposMergeResponseParentsItem>;
    sha: string;
    url: string;
  };
  type ReposListUsersWithAccessToProtectedBranchResponseItem = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type ReposListTopicsResponse = { names: Array<string> };
  type ReposListTeamsWithAccessToProtectedBranchResponseItem = {
    description: string;
    html_url: string;
    id: number;
    members_url: string;
    name: string;
    node_id: string;
    parent: null;
    permission: string;
    privacy: string;
    repositories_url: string;
    slug: string;
    url: string;
  };
  type ReposListTeamsResponseItem = {
    description: string;
    html_url: string;
    id: number;
    members_url: string;
    name: string;
    node_id: string;
    parent: null;
    permission: string;
    privacy: string;
    repositories_url: string;
    slug: string;
    url: string;
  };
  type ReposListTagsResponseItemCommit = { sha: string; url: string };
  type ReposListTagsResponseItem = {
    commit: ReposListTagsResponseItemCommit;
    name: string;
    tarball_url: string;
    zipball_url: string;
  };
  type ReposListStatusesForRefResponseItemCreator = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type ReposListStatusesForRefResponseItem = {
    avatar_url: string;
    context: string;
    created_at: string;
    creator: ReposListStatusesForRefResponseItemCreator;
    description: string;
    id: number;
    node_id: string;
    state: string;
    target_url: string;
    updated_at: string;
    url: string;
  };
  type ReposListReleasesResponseItemAuthor = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type ReposListReleasesResponseItemAssetsItemUploader = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type ReposListReleasesResponseItemAssetsItem = {
    browser_download_url: string;
    content_type: string;
    created_at: string;
    download_count: number;
    id: number;
    label: string;
    name: string;
    node_id: string;
    size: number;
    state: string;
    updated_at: string;
    uploader: ReposListReleasesResponseItemAssetsItemUploader;
    url: string;
  };
  type ReposListReleasesResponseItem = {
    assets: Array<ReposListReleasesResponseItemAssetsItem>;
    assets_url: string;
    author: ReposListReleasesResponseItemAuthor;
    body: string;
    created_at: string;
    draft: boolean;
    html_url: string;
    id: number;
    name: string;
    node_id: string;
    prerelease: boolean;
    published_at: string;
    tag_name: string;
    tarball_url: string;
    target_commitish: string;
    upload_url: string;
    url: string;
    zipball_url: string;
  };
  type ReposListPullRequestsAssociatedWithCommitResponseItemUser = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type ReposListPullRequestsAssociatedWithCommitResponseItemRequestedTeamsItem = {
    description: string;
    html_url: string;
    id: number;
    members_url: string;
    name: string;
    node_id: string;
    parent: null;
    permission: string;
    privacy: string;
    repositories_url: string;
    slug: string;
    url: string;
  };
  type ReposListPullRequestsAssociatedWithCommitResponseItemRequestedReviewersItem = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type ReposListPullRequestsAssociatedWithCommitResponseItemMilestoneCreator = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type ReposListPullRequestsAssociatedWithCommitResponseItemMilestone = {
    closed_at: string;
    closed_issues: number;
    created_at: string;
    creator: ReposListPullRequestsAssociatedWithCommitResponseItemMilestoneCreator;
    description: string;
    due_on: string;
    html_url: string;
    id: number;
    labels_url: string;
    node_id: string;
    number: number;
    open_issues: number;
    state: string;
    title: string;
    updated_at: string;
    url: string;
  };
  type ReposListPullRequestsAssociatedWithCommitResponseItemLabelsItem = {
    color: string;
    default: boolean;
    description: string;
    id: number;
    name: string;
    node_id: string;
    url: string;
  };
  type ReposListPullRequestsAssociatedWithCommitResponseItemHeadUser = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type ReposListPullRequestsAssociatedWithCommitResponseItemHeadRepoPermissions = {
    admin: boolean;
    pull: boolean;
    push: boolean;
  };
  type ReposListPullRequestsAssociatedWithCommitResponseItemHeadRepoOwner = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type ReposListPullRequestsAssociatedWithCommitResponseItemHeadRepo = {
    allow_merge_commit: boolean;
    allow_rebase_merge: boolean;
    allow_squash_merge: boolean;
    archive_url: string;
    archived: boolean;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    clone_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    created_at: string;
    default_branch: string;
    deployments_url: string;
    description: string;
    disabled: boolean;
    downloads_url: string;
    events_url: string;
    fork: boolean;
    forks_count: number;
    forks_url: string;
    full_name: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    has_downloads: boolean;
    has_issues: boolean;
    has_pages: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    homepage: string;
    hooks_url: string;
    html_url: string;
    id: number;
    is_template: boolean;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    language: null;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    mirror_url: string;
    name: string;
    network_count: number;
    node_id: string;
    notifications_url: string;
    open_issues_count: number;
    owner: ReposListPullRequestsAssociatedWithCommitResponseItemHeadRepoOwner;
    permissions: ReposListPullRequestsAssociatedWithCommitResponseItemHeadRepoPermissions;
    private: boolean;
    pulls_url: string;
    pushed_at: string;
    releases_url: string;
    size: number;
    ssh_url: string;
    stargazers_count: number;
    stargazers_url: string;
    statuses_url: string;
    subscribers_count: number;
    subscribers_url: string;
    subscription_url: string;
    svn_url: string;
    tags_url: string;
    teams_url: string;
    temp_clone_token: string;
    template_repository: null;
    topics: Array<string>;
    trees_url: string;
    updated_at: string;
    url: string;
    visibility: string;
    watchers_count: number;
  };
  type ReposListPullRequestsAssociatedWithCommitResponseItemHead = {
    label: string;
    ref: string;
    repo: ReposListPullRequestsAssociatedWithCommitResponseItemHeadRepo;
    sha: string;
    user: ReposListPullRequestsAssociatedWithCommitResponseItemHeadUser;
  };
  type ReposListPullRequestsAssociatedWithCommitResponseItemBaseUser = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type ReposListPullRequestsAssociatedWithCommitResponseItemBaseRepoPermissions = {
    admin: boolean;
    pull: boolean;
    push: boolean;
  };
  type ReposListPullRequestsAssociatedWithCommitResponseItemBaseRepoOwner = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type ReposListPullRequestsAssociatedWithCommitResponseItemBaseRepo = {
    allow_merge_commit: boolean;
    allow_rebase_merge: boolean;
    allow_squash_merge: boolean;
    archive_url: string;
    archived: boolean;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    clone_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    created_at: string;
    default_branch: string;
    deployments_url: string;
    description: string;
    disabled: boolean;
    downloads_url: string;
    events_url: string;
    fork: boolean;
    forks_count: number;
    forks_url: string;
    full_name: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    has_downloads: boolean;
    has_issues: boolean;
    has_pages: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    homepage: string;
    hooks_url: string;
    html_url: string;
    id: number;
    is_template: boolean;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    language: null;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    mirror_url: string;
    name: string;
    network_count: number;
    node_id: string;
    notifications_url: string;
    open_issues_count: number;
    owner: ReposListPullRequestsAssociatedWithCommitResponseItemBaseRepoOwner;
    permissions: ReposListPullRequestsAssociatedWithCommitResponseItemBaseRepoPermissions;
    private: boolean;
    pulls_url: string;
    pushed_at: string;
    releases_url: string;
    size: number;
    ssh_url: string;
    stargazers_count: number;
    stargazers_url: string;
    statuses_url: string;
    subscribers_count: number;
    subscribers_url: string;
    subscription_url: string;
    svn_url: string;
    tags_url: string;
    teams_url: string;
    temp_clone_token: string;
    template_repository: null;
    topics: Array<string>;
    trees_url: string;
    updated_at: string;
    url: string;
    visibility: string;
    watchers_count: number;
  };
  type ReposListPullRequestsAssociatedWithCommitResponseItemBase = {
    label: string;
    ref: string;
    repo: ReposListPullRequestsAssociatedWithCommitResponseItemBaseRepo;
    sha: string;
    user: ReposListPullRequestsAssociatedWithCommitResponseItemBaseUser;
  };
  type ReposListPullRequestsAssociatedWithCommitResponseItemAssigneesItem = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type ReposListPullRequestsAssociatedWithCommitResponseItemAssignee = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type ReposListPullRequestsAssociatedWithCommitResponseItemLinksStatuses = {
    href: string;
  };
  type ReposListPullRequestsAssociatedWithCommitResponseItemLinksSelf = {
    href: string;
  };
  type ReposListPullRequestsAssociatedWithCommitResponseItemLinksReviewComments = {
    href: string;
  };
  type ReposListPullRequestsAssociatedWithCommitResponseItemLinksReviewComment = {
    href: string;
  };
  type ReposListPullRequestsAssociatedWithCommitResponseItemLinksIssue = {
    href: string;
  };
  type ReposListPullRequestsAssociatedWithCommitResponseItemLinksHtml = {
    href: string;
  };
  type ReposListPullRequestsAssociatedWithCommitResponseItemLinksCommits = {
    href: string;
  };
  type ReposListPullRequestsAssociatedWithCommitResponseItemLinksComments = {
    href: string;
  };
  type ReposListPullRequestsAssociatedWithCommitResponseItemLinks = {
    comments: ReposListPullRequestsAssociatedWithCommitResponseItemLinksComments;
    commits: ReposListPullRequestsAssociatedWithCommitResponseItemLinksCommits;
    html: ReposListPullRequestsAssociatedWithCommitResponseItemLinksHtml;
    issue: ReposListPullRequestsAssociatedWithCommitResponseItemLinksIssue;
    review_comment: ReposListPullRequestsAssociatedWithCommitResponseItemLinksReviewComment;
    review_comments: ReposListPullRequestsAssociatedWithCommitResponseItemLinksReviewComments;
    self: ReposListPullRequestsAssociatedWithCommitResponseItemLinksSelf;
    statuses: ReposListPullRequestsAssociatedWithCommitResponseItemLinksStatuses;
  };
  type ReposListPullRequestsAssociatedWithCommitResponseItem = {
    _links: ReposListPullRequestsAssociatedWithCommitResponseItemLinks;
    active_lock_reason: string;
    assignee: ReposListPullRequestsAssociatedWithCommitResponseItemAssignee;
    assignees: Array<
      ReposListPullRequestsAssociatedWithCommitResponseItemAssigneesItem
    >;
    author_association: string;
    base: ReposListPullRequestsAssociatedWithCommitResponseItemBase;
    body: string;
    closed_at: string;
    comments_url: string;
    commits_url: string;
    created_at: string;
    diff_url: string;
    draft: boolean;
    head: ReposListPullRequestsAssociatedWithCommitResponseItemHead;
    html_url: string;
    id: number;
    issue_url: string;
    labels: Array<
      ReposListPullRequestsAssociatedWithCommitResponseItemLabelsItem
    >;
    locked: boolean;
    merge_commit_sha: string;
    merged_at: string;
    milestone: ReposListPullRequestsAssociatedWithCommitResponseItemMilestone;
    node_id: string;
    number: number;
    patch_url: string;
    requested_reviewers: Array<
      ReposListPullRequestsAssociatedWithCommitResponseItemRequestedReviewersItem
    >;
    requested_teams: Array<
      ReposListPullRequestsAssociatedWithCommitResponseItemRequestedTeamsItem
    >;
    review_comment_url: string;
    review_comments_url: string;
    state: string;
    statuses_url: string;
    title: string;
    updated_at: string;
    url: string;
    user: ReposListPullRequestsAssociatedWithCommitResponseItemUser;
  };
  type ReposListPublicResponseItemOwner = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type ReposListPublicResponseItem = {
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    description: string;
    downloads_url: string;
    events_url: string;
    fork: boolean;
    forks_url: string;
    full_name: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    html_url: string;
    id: number;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    name: string;
    node_id: string;
    notifications_url: string;
    owner: ReposListPublicResponseItemOwner;
    private: boolean;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    url: string;
  };
  type ReposListProtectedBranchUserRestrictionsResponseItem = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type ReposListProtectedBranchTeamRestrictionsResponseItem = {
    description: string;
    html_url: string;
    id: number;
    members_url: string;
    name: string;
    node_id: string;
    parent: null;
    permission: string;
    privacy: string;
    repositories_url: string;
    slug: string;
    url: string;
  };
  type ReposListPagesBuildsResponseItemPusher = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type ReposListPagesBuildsResponseItemError = { message: null };
  type ReposListPagesBuildsResponseItem = {
    commit: string;
    created_at: string;
    duration: number;
    error: ReposListPagesBuildsResponseItemError;
    pusher: ReposListPagesBuildsResponseItemPusher;
    status: string;
    updated_at: string;
    url: string;
  };
  type ReposListLanguagesResponse = { C: number; Python: number };
  type ReposListInvitationsForAuthenticatedUserResponseItemRepositoryOwner = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type ReposListInvitationsForAuthenticatedUserResponseItemRepository = {
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    description: string;
    downloads_url: string;
    events_url: string;
    fork: boolean;
    forks_url: string;
    full_name: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    html_url: string;
    id: number;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    name: string;
    node_id: string;
    notifications_url: string;
    owner: ReposListInvitationsForAuthenticatedUserResponseItemRepositoryOwner;
    private: boolean;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    url: string;
  };
  type ReposListInvitationsForAuthenticatedUserResponseItemInviter = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type ReposListInvitationsForAuthenticatedUserResponseItemInvitee = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type ReposListInvitationsForAuthenticatedUserResponseItem = {
    created_at: string;
    html_url: string;
    id: number;
    invitee: ReposListInvitationsForAuthenticatedUserResponseItemInvitee;
    inviter: ReposListInvitationsForAuthenticatedUserResponseItemInviter;
    permissions: string;
    repository: ReposListInvitationsForAuthenticatedUserResponseItemRepository;
    url: string;
  };
  type ReposListInvitationsResponseItemRepositoryOwner = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type ReposListInvitationsResponseItemRepository = {
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    description: string;
    downloads_url: string;
    events_url: string;
    fork: boolean;
    forks_url: string;
    full_name: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    html_url: string;
    id: number;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    name: string;
    node_id: string;
    notifications_url: string;
    owner: ReposListInvitationsResponseItemRepositoryOwner;
    private: boolean;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    url: string;
  };
  type ReposListInvitationsResponseItemInviter = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type ReposListInvitationsResponseItemInvitee = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type ReposListInvitationsResponseItem = {
    created_at: string;
    html_url: string;
    id: number;
    invitee: ReposListInvitationsResponseItemInvitee;
    inviter: ReposListInvitationsResponseItemInviter;
    permissions: string;
    repository: ReposListInvitationsResponseItemRepository;
    url: string;
  };
  type ReposListHooksResponseItemLastResponse = {
    code: null;
    message: null;
    status: string;
  };
  type ReposListHooksResponseItemConfig = {
    content_type: string;
    insecure_ssl: string;
    url: string;
  };
  type ReposListHooksResponseItem = {
    active: boolean;
    config: ReposListHooksResponseItemConfig;
    created_at: string;
    events: Array<string>;
    id: number;
    last_response: ReposListHooksResponseItemLastResponse;
    name: string;
    ping_url: string;
    test_url: string;
    type: string;
    updated_at: string;
    url: string;
  };
  type ReposListForksResponseItemPermissions = {
    admin: boolean;
    pull: boolean;
    push: boolean;
  };
  type ReposListForksResponseItemOwner = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type ReposListForksResponseItemLicense = {
    key: string;
    name: string;
    node_id: string;
    spdx_id: string;
    url: string;
  };
  type ReposListForksResponseItem = {
    archive_url: string;
    archived: boolean;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    clone_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    created_at: string;
    default_branch: string;
    deployments_url: string;
    description: string;
    disabled: boolean;
    downloads_url: string;
    events_url: string;
    fork: boolean;
    forks_count: number;
    forks_url: string;
    full_name: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    has_downloads: boolean;
    has_issues: boolean;
    has_pages: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    homepage: string;
    hooks_url: string;
    html_url: string;
    id: number;
    is_template: boolean;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    language: null;
    languages_url: string;
    license: ReposListForksResponseItemLicense;
    merges_url: string;
    milestones_url: string;
    mirror_url: string;
    name: string;
    network_count: number;
    node_id: string;
    notifications_url: string;
    open_issues_count: number;
    owner: ReposListForksResponseItemOwner;
    permissions: ReposListForksResponseItemPermissions;
    private: boolean;
    pulls_url: string;
    pushed_at: string;
    releases_url: string;
    size: number;
    ssh_url: string;
    stargazers_count: number;
    stargazers_url: string;
    statuses_url: string;
    subscribers_count: number;
    subscribers_url: string;
    subscription_url: string;
    svn_url: string;
    tags_url: string;
    teams_url: string;
    temp_clone_token: string;
    template_repository: null;
    topics: Array<string>;
    trees_url: string;
    updated_at: string;
    url: string;
    visibility: string;
    watchers_count: number;
  };
  type ReposListForOrgResponseItemPermissions = {
    admin: boolean;
    pull: boolean;
    push: boolean;
  };
  type ReposListForOrgResponseItemOwner = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type ReposListForOrgResponseItemLicense = {
    key: string;
    name: string;
    node_id: string;
    spdx_id: string;
    url: string;
  };
  type ReposListForOrgResponseItem = {
    archive_url: string;
    archived: boolean;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    clone_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    created_at: string;
    default_branch: string;
    deployments_url: string;
    description: string;
    disabled: boolean;
    downloads_url: string;
    events_url: string;
    fork: boolean;
    forks_count: number;
    forks_url: string;
    full_name: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    has_downloads: boolean;
    has_issues: boolean;
    has_pages: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    homepage: string;
    hooks_url: string;
    html_url: string;
    id: number;
    is_template: boolean;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    language: null;
    languages_url: string;
    license: ReposListForOrgResponseItemLicense;
    merges_url: string;
    milestones_url: string;
    mirror_url: string;
    name: string;
    network_count: number;
    node_id: string;
    notifications_url: string;
    open_issues_count: number;
    owner: ReposListForOrgResponseItemOwner;
    permissions: ReposListForOrgResponseItemPermissions;
    private: boolean;
    pulls_url: string;
    pushed_at: string;
    releases_url: string;
    size: number;
    ssh_url: string;
    stargazers_count: number;
    stargazers_url: string;
    statuses_url: string;
    subscribers_count: number;
    subscribers_url: string;
    subscription_url: string;
    svn_url: string;
    tags_url: string;
    teams_url: string;
    temp_clone_token: string;
    template_repository: null;
    topics: Array<string>;
    trees_url: string;
    updated_at: string;
    url: string;
    visibility: string;
    watchers_count: number;
  };
  type ReposListDownloadsResponseItem = {
    content_type: string;
    description: string;
    download_count: number;
    html_url: string;
    id: number;
    name: string;
    size: number;
    url: string;
  };
  type ReposListDeploymentsResponseItemPayload = { deploy: string };
  type ReposListDeploymentsResponseItemCreator = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type ReposListDeploymentsResponseItem = {
    created_at: string;
    creator: ReposListDeploymentsResponseItemCreator;
    description: string;
    environment: string;
    id: number;
    node_id: string;
    original_environment: string;
    payload: ReposListDeploymentsResponseItemPayload;
    production_environment: boolean;
    ref: string;
    repository_url: string;
    sha: string;
    statuses_url: string;
    task: string;
    transient_environment: boolean;
    updated_at: string;
    url: string;
  };
  type ReposListDeploymentStatusesResponseItemCreator = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type ReposListDeploymentStatusesResponseItem = {
    created_at: string;
    creator: ReposListDeploymentStatusesResponseItemCreator;
    deployment_url: string;
    description: string;
    environment: string;
    environment_url: string;
    id: number;
    log_url: string;
    node_id: string;
    repository_url: string;
    state: string;
    target_url: string;
    updated_at: string;
    url: string;
  };
  type ReposListDeployKeysResponseItem = {
    created_at: string;
    id: number;
    key: string;
    read_only: boolean;
    title: string;
    url: string;
    verified: boolean;
  };
  type ReposListContributorsResponseItem = {
    avatar_url: string;
    contributions: number;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type ReposListCommitsResponseItemParentsItem = { sha: string; url: string };
  type ReposListCommitsResponseItemCommitter = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type ReposListCommitsResponseItemCommitVerification = {
    payload: null;
    reason: string;
    signature: null;
    verified: boolean;
  };
  type ReposListCommitsResponseItemCommitTree = { sha: string; url: string };
  type ReposListCommitsResponseItemCommitCommitter = {
    date: string;
    email: string;
    name: string;
  };
  type ReposListCommitsResponseItemCommitAuthor = {
    date: string;
    email: string;
    name: string;
  };
  type ReposListCommitsResponseItemCommit = {
    author: ReposListCommitsResponseItemCommitAuthor;
    comment_count: number;
    committer: ReposListCommitsResponseItemCommitCommitter;
    message: string;
    tree: ReposListCommitsResponseItemCommitTree;
    url: string;
    verification: ReposListCommitsResponseItemCommitVerification;
  };
  type ReposListCommitsResponseItemAuthor = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type ReposListCommitsResponseItem = {
    author: ReposListCommitsResponseItemAuthor;
    comments_url: string;
    commit: ReposListCommitsResponseItemCommit;
    committer: ReposListCommitsResponseItemCommitter;
    html_url: string;
    node_id: string;
    parents: Array<ReposListCommitsResponseItemParentsItem>;
    sha: string;
    url: string;
  };
  type ReposListCommitCommentsResponseItemUser = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type ReposListCommitCommentsResponseItem = {
    body: string;
    commit_id: string;
    created_at: string;
    html_url: string;
    id: number;
    line: number;
    node_id: string;
    path: string;
    position: number;
    updated_at: string;
    url: string;
    user: ReposListCommitCommentsResponseItemUser;
  };
  type ReposListCommentsForCommitResponseItemUser = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type ReposListCommentsForCommitResponseItem = {
    body: string;
    commit_id: string;
    created_at: string;
    html_url: string;
    id: number;
    line: number;
    node_id: string;
    path: string;
    position: number;
    updated_at: string;
    url: string;
    user: ReposListCommentsForCommitResponseItemUser;
  };
  type ReposListCollaboratorsResponseItemPermissions = {
    admin: boolean;
    pull: boolean;
    push: boolean;
  };
  type ReposListCollaboratorsResponseItem = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    permissions: ReposListCollaboratorsResponseItemPermissions;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type ReposListBranchesForHeadCommitResponseItemCommit = {
    sha: string;
    url: string;
  };
  type ReposListBranchesForHeadCommitResponseItem = {
    commit: ReposListBranchesForHeadCommitResponseItemCommit;
    name: string;
    protected: string;
  };
  type ReposListBranchesResponseItemProtectionRequiredStatusChecks = {
    contexts: Array<string>;
    enforcement_level: string;
  };
  type ReposListBranchesResponseItemProtection = {
    enabled: boolean;
    required_status_checks: ReposListBranchesResponseItemProtectionRequiredStatusChecks;
  };
  type ReposListBranchesResponseItemCommit = { sha: string; url: string };
  type ReposListBranchesResponseItem = {
    commit: ReposListBranchesResponseItemCommit;
    name: string;
    protected: boolean;
    protection: ReposListBranchesResponseItemProtection;
    protection_url: string;
  };
  type ReposListAssetsForReleaseResponseItemUploader = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type ReposListAssetsForReleaseResponseItem = {
    browser_download_url: string;
    content_type: string;
    created_at: string;
    download_count: number;
    id: number;
    label: string;
    name: string;
    node_id: string;
    size: number;
    state: string;
    updated_at: string;
    uploader: ReposListAssetsForReleaseResponseItemUploader;
    url: string;
  };
  type ReposListAppsWithAccessToProtectedBranchResponseItemPermissions = {
    contents: string;
    issues: string;
    metadata: string;
    single_file: string;
  };
  type ReposListAppsWithAccessToProtectedBranchResponseItemOwner = {
    avatar_url: string;
    description: string;
    events_url: string;
    hooks_url: string;
    id: number;
    issues_url: string;
    login: string;
    members_url: string;
    node_id: string;
    public_members_url: string;
    repos_url: string;
    url: string;
  };
  type ReposListAppsWithAccessToProtectedBranchResponseItem = {
    created_at: string;
    description: string;
    events: Array<string>;
    external_url: string;
    html_url: string;
    id: number;
    name: string;
    node_id: string;
    owner: ReposListAppsWithAccessToProtectedBranchResponseItemOwner;
    permissions: ReposListAppsWithAccessToProtectedBranchResponseItemPermissions;
    slug: string;
    updated_at: string;
  };
  type ReposGetViewsResponseViewsItem = {
    count: number;
    timestamp: string;
    uniques: number;
  };
  type ReposGetViewsResponse = {
    count: number;
    uniques: number;
    views: Array<ReposGetViewsResponseViewsItem>;
  };
  type ReposGetUsersWithAccessToProtectedBranchResponseItem = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type ReposGetTopReferrersResponseItem = {
    count: number;
    referrer: string;
    uniques: number;
  };
  type ReposGetTopPathsResponseItem = {
    count: number;
    path: string;
    title: string;
    uniques: number;
  };
  type ReposGetTeamsWithAccessToProtectedBranchResponseItem = {
    description: string;
    html_url: string;
    id: number;
    members_url: string;
    name: string;
    node_id: string;
    parent: null;
    permission: string;
    privacy: string;
    repositories_url: string;
    slug: string;
    url: string;
  };
  type ReposGetReleaseByTagResponseAuthor = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type ReposGetReleaseByTagResponseAssetsItemUploader = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type ReposGetReleaseByTagResponseAssetsItem = {
    browser_download_url: string;
    content_type: string;
    created_at: string;
    download_count: number;
    id: number;
    label: string;
    name: string;
    node_id: string;
    size: number;
    state: string;
    updated_at: string;
    uploader: ReposGetReleaseByTagResponseAssetsItemUploader;
    url: string;
  };
  type ReposGetReleaseByTagResponse = {
    assets: Array<ReposGetReleaseByTagResponseAssetsItem>;
    assets_url: string;
    author: ReposGetReleaseByTagResponseAuthor;
    body: string;
    created_at: string;
    draft: boolean;
    html_url: string;
    id: number;
    name: string;
    node_id: string;
    prerelease: boolean;
    published_at: string;
    tag_name: string;
    tarball_url: string;
    target_commitish: string;
    upload_url: string;
    url: string;
    zipball_url: string;
  };
  type ReposGetReleaseAssetResponseUploader = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type ReposGetReleaseAssetResponse = {
    browser_download_url: string;
    content_type: string;
    created_at: string;
    download_count: number;
    id: number;
    label: string;
    name: string;
    node_id: string;
    size: number;
    state: string;
    updated_at: string;
    uploader: ReposGetReleaseAssetResponseUploader;
    url: string;
  };
  type ReposGetReleaseResponseAuthor = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type ReposGetReleaseResponseAssetsItemUploader = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type ReposGetReleaseResponseAssetsItem = {
    browser_download_url: string;
    content_type: string;
    created_at: string;
    download_count: number;
    id: number;
    label: string;
    name: string;
    node_id: string;
    size: number;
    state: string;
    updated_at: string;
    uploader: ReposGetReleaseResponseAssetsItemUploader;
    url: string;
  };
  type ReposGetReleaseResponse = {
    assets: Array<ReposGetReleaseResponseAssetsItem>;
    assets_url: string;
    author: ReposGetReleaseResponseAuthor;
    body: string;
    created_at: string;
    draft: boolean;
    html_url: string;
    id: number;
    name: string;
    node_id: string;
    prerelease: boolean;
    published_at: string;
    tag_name: string;
    tarball_url: string;
    target_commitish: string;
    upload_url: string;
    url: string;
    zipball_url: string;
  };
  type ReposGetReadmeResponseLinks = {
    git: string;
    html: string;
    self: string;
  };
  type ReposGetReadmeResponse = {
    _links: ReposGetReadmeResponseLinks;
    content: string;
    download_url: string;
    encoding: string;
    git_url: string;
    html_url: string;
    name: string;
    path: string;
    sha: string;
    size: number;
    type: string;
    url: string;
  };
  type ReposGetProtectedBranchRestrictionsResponseUsersItem = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type ReposGetProtectedBranchRestrictionsResponseTeamsItem = {
    description: string;
    html_url: string;
    id: number;
    members_url: string;
    name: string;
    node_id: string;
    parent: null;
    permission: string;
    privacy: string;
    repositories_url: string;
    slug: string;
    url: string;
  };
  type ReposGetProtectedBranchRestrictionsResponseAppsItemPermissions = {
    contents: string;
    issues: string;
    metadata: string;
    single_file: string;
  };
  type ReposGetProtectedBranchRestrictionsResponseAppsItemOwner = {
    avatar_url: string;
    description: string;
    events_url: string;
    hooks_url: string;
    id: number;
    issues_url: string;
    login: string;
    members_url: string;
    node_id: string;
    public_members_url: string;
    repos_url: string;
    url: string;
  };
  type ReposGetProtectedBranchRestrictionsResponseAppsItem = {
    created_at: string;
    description: string;
    events: Array<string>;
    external_url: string;
    html_url: string;
    id: number;
    name: string;
    node_id: string;
    owner: ReposGetProtectedBranchRestrictionsResponseAppsItemOwner;
    permissions: ReposGetProtectedBranchRestrictionsResponseAppsItemPermissions;
    slug: string;
    updated_at: string;
  };
  type ReposGetProtectedBranchRestrictionsResponse = {
    apps: Array<ReposGetProtectedBranchRestrictionsResponseAppsItem>;
    apps_url: string;
    teams: Array<ReposGetProtectedBranchRestrictionsResponseTeamsItem>;
    teams_url: string;
    url: string;
    users: Array<ReposGetProtectedBranchRestrictionsResponseUsersItem>;
    users_url: string;
  };
  type ReposGetProtectedBranchRequiredStatusChecksResponse = {
    contexts: Array<string>;
    contexts_url: string;
    strict: boolean;
    url: string;
  };
  type ReposGetProtectedBranchRequiredSignaturesResponse = {
    enabled: boolean;
    url: string;
  };
  type ReposGetProtectedBranchPullRequestReviewEnforcementResponseDismissalRestrictionsUsersItem = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type ReposGetProtectedBranchPullRequestReviewEnforcementResponseDismissalRestrictionsTeamsItem = {
    description: string;
    html_url: string;
    id: number;
    members_url: string;
    name: string;
    node_id: string;
    parent: null;
    permission: string;
    privacy: string;
    repositories_url: string;
    slug: string;
    url: string;
  };
  type ReposGetProtectedBranchPullRequestReviewEnforcementResponseDismissalRestrictions = {
    teams: Array<
      ReposGetProtectedBranchPullRequestReviewEnforcementResponseDismissalRestrictionsTeamsItem
    >;
    teams_url: string;
    url: string;
    users: Array<
      ReposGetProtectedBranchPullRequestReviewEnforcementResponseDismissalRestrictionsUsersItem
    >;
    users_url: string;
  };
  type ReposGetProtectedBranchPullRequestReviewEnforcementResponse = {
    dismiss_stale_reviews: boolean;
    dismissal_restrictions: ReposGetProtectedBranchPullRequestReviewEnforcementResponseDismissalRestrictions;
    require_code_owner_reviews: boolean;
    required_approving_review_count: number;
    url: string;
  };
  type ReposGetProtectedBranchAdminEnforcementResponse = {
    enabled: boolean;
    url: string;
  };
  type ReposGetParticipationStatsResponse = {
    all: Array<number>;
    owner: Array<number>;
  };
  type ReposGetPagesBuildResponsePusher = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type ReposGetPagesBuildResponseError = { message: null };
  type ReposGetPagesBuildResponse = {
    commit: string;
    created_at: string;
    duration: number;
    error: ReposGetPagesBuildResponseError;
    pusher: ReposGetPagesBuildResponsePusher;
    status: string;
    updated_at: string;
    url: string;
  };
  type ReposGetPagesResponseSource = { branch: string; directory: string };
  type ReposGetPagesResponse = {
    cname: string;
    custom_404: boolean;
    html_url: string;
    source: ReposGetPagesResponseSource;
    status: string;
    url: string;
  };
  type ReposGetLatestReleaseResponseAuthor = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type ReposGetLatestReleaseResponseAssetsItemUploader = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type ReposGetLatestReleaseResponseAssetsItem = {
    browser_download_url: string;
    content_type: string;
    created_at: string;
    download_count: number;
    id: number;
    label: string;
    name: string;
    node_id: string;
    size: number;
    state: string;
    updated_at: string;
    uploader: ReposGetLatestReleaseResponseAssetsItemUploader;
    url: string;
  };
  type ReposGetLatestReleaseResponse = {
    assets: Array<ReposGetLatestReleaseResponseAssetsItem>;
    assets_url: string;
    author: ReposGetLatestReleaseResponseAuthor;
    body: string;
    created_at: string;
    draft: boolean;
    html_url: string;
    id: number;
    name: string;
    node_id: string;
    prerelease: boolean;
    published_at: string;
    tag_name: string;
    tarball_url: string;
    target_commitish: string;
    upload_url: string;
    url: string;
    zipball_url: string;
  };
  type ReposGetLatestPagesBuildResponsePusher = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type ReposGetLatestPagesBuildResponseError = { message: null };
  type ReposGetLatestPagesBuildResponse = {
    commit: string;
    created_at: string;
    duration: number;
    error: ReposGetLatestPagesBuildResponseError;
    pusher: ReposGetLatestPagesBuildResponsePusher;
    status: string;
    updated_at: string;
    url: string;
  };
  type ReposGetHookResponseLastResponse = {
    code: null;
    message: null;
    status: string;
  };
  type ReposGetHookResponseConfig = {
    content_type: string;
    insecure_ssl: string;
    url: string;
  };
  type ReposGetHookResponse = {
    active: boolean;
    config: ReposGetHookResponseConfig;
    created_at: string;
    events: Array<string>;
    id: number;
    last_response: ReposGetHookResponseLastResponse;
    name: string;
    ping_url: string;
    test_url: string;
    type: string;
    updated_at: string;
    url: string;
  };
  type ReposGetDownloadResponse = {
    content_type: string;
    description: string;
    download_count: number;
    html_url: string;
    id: number;
    name: string;
    size: number;
    url: string;
  };
  type ReposGetDeploymentStatusResponseCreator = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type ReposGetDeploymentStatusResponse = {
    created_at: string;
    creator: ReposGetDeploymentStatusResponseCreator;
    deployment_url: string;
    description: string;
    environment: string;
    environment_url: string;
    id: number;
    log_url: string;
    node_id: string;
    repository_url: string;
    state: string;
    target_url: string;
    updated_at: string;
    url: string;
  };
  type ReposGetDeploymentResponsePayload = { deploy: string };
  type ReposGetDeploymentResponseCreator = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type ReposGetDeploymentResponse = {
    created_at: string;
    creator: ReposGetDeploymentResponseCreator;
    description: string;
    environment: string;
    id: number;
    node_id: string;
    original_environment: string;
    payload: ReposGetDeploymentResponsePayload;
    production_environment: boolean;
    ref: string;
    repository_url: string;
    sha: string;
    statuses_url: string;
    task: string;
    transient_environment: boolean;
    updated_at: string;
    url: string;
  };
  type ReposGetDeployKeyResponse = {
    created_at: string;
    id: number;
    key: string;
    read_only: boolean;
    title: string;
    url: string;
    verified: boolean;
  };
  type ReposGetContributorsStatsResponseItemWeeksItem = {
    a: number;
    c: number;
    d: number;
    w: string;
  };
  type ReposGetContributorsStatsResponseItemAuthor = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type ReposGetContributorsStatsResponseItem = {
    author: ReposGetContributorsStatsResponseItemAuthor;
    total: number;
    weeks: Array<ReposGetContributorsStatsResponseItemWeeksItem>;
  };
  type ReposGetContentsResponseItemLinks = {
    git: string;
    html: string;
    self: string;
  };
  type ReposGetContentsResponseItem = {
    _links: ReposGetContentsResponseItemLinks;
    download_url: string | null;
    git_url: string;
    html_url: string;
    name: string;
    path: string;
    sha: string;
    size: number;
    type: string;
    url: string;
  };
  type ReposGetContentsResponseLinks = {
    git: string;
    html: string;
    self: string;
  };
  type ReposGetContentsResponse =
    | {
        _links: ReposGetContentsResponseLinks;
        content?: string;
        download_url: string | null;
        encoding?: string;
        git_url: string;
        html_url: string;
        name: string;
        path: string;
        sha: string;
        size: number;
        type: string;
        url: string;
        target?: string;
        submodule_git_url?: string;
      }
    | Array<ReposGetContentsResponseItem>;
  type ReposGetCommitCommentResponseUser = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type ReposGetCommitCommentResponse = {
    body: string;
    commit_id: string;
    created_at: string;
    html_url: string;
    id: number;
    line: number;
    node_id: string;
    path: string;
    position: number;
    updated_at: string;
    url: string;
    user: ReposGetCommitCommentResponseUser;
  };
  type ReposGetCommitActivityStatsResponseItem = {
    days: Array<number>;
    total: number;
    week: number;
  };
  type ReposGetCommitResponseStats = {
    additions: number;
    deletions: number;
    total: number;
  };
  type ReposGetCommitResponseParentsItem = { sha: string; url: string };
  type ReposGetCommitResponseFilesItem = {
    additions: number;
    blob_url: string;
    changes: number;
    deletions: number;
    filename: string;
    patch: string;
    raw_url: string;
    status: string;
  };
  type ReposGetCommitResponseCommitter = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type ReposGetCommitResponseCommitVerification = {
    payload: null;
    reason: string;
    signature: null;
    verified: boolean;
  };
  type ReposGetCommitResponseCommitTree = { sha: string; url: string };
  type ReposGetCommitResponseCommitCommitter = {
    date: string;
    email: string;
    name: string;
  };
  type ReposGetCommitResponseCommitAuthor = {
    date: string;
    email: string;
    name: string;
  };
  type ReposGetCommitResponseCommit = {
    author: ReposGetCommitResponseCommitAuthor;
    comment_count: number;
    committer: ReposGetCommitResponseCommitCommitter;
    message: string;
    tree: ReposGetCommitResponseCommitTree;
    url: string;
    verification: ReposGetCommitResponseCommitVerification;
  };
  type ReposGetCommitResponseAuthor = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type ReposGetCommitResponse = {
    author: ReposGetCommitResponseAuthor;
    comments_url: string;
    commit: ReposGetCommitResponseCommit;
    committer: ReposGetCommitResponseCommitter;
    files: Array<ReposGetCommitResponseFilesItem>;
    html_url: string;
    node_id: string;
    parents: Array<ReposGetCommitResponseParentsItem>;
    sha: string;
    stats: ReposGetCommitResponseStats;
    url: string;
  };
  type ReposGetCombinedStatusForRefResponseStatusesItem = {
    avatar_url: string;
    context: string;
    created_at: string;
    description: string;
    id: number;
    node_id: string;
    state: string;
    target_url: string;
    updated_at: string;
    url: string;
  };
  type ReposGetCombinedStatusForRefResponseRepositoryOwner = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type ReposGetCombinedStatusForRefResponseRepository = {
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    description: string;
    downloads_url: string;
    events_url: string;
    fork: boolean;
    forks_url: string;
    full_name: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    html_url: string;
    id: number;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    name: string;
    node_id: string;
    notifications_url: string;
    owner: ReposGetCombinedStatusForRefResponseRepositoryOwner;
    private: boolean;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    url: string;
  };
  type ReposGetCombinedStatusForRefResponse = {
    commit_url: string;
    repository: ReposGetCombinedStatusForRefResponseRepository;
    sha: string;
    state: string;
    statuses: Array<ReposGetCombinedStatusForRefResponseStatusesItem>;
    total_count: number;
    url: string;
  };
  type ReposGetCollaboratorPermissionLevelResponseUser = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type ReposGetCollaboratorPermissionLevelResponse = {
    permission: string;
    user: ReposGetCollaboratorPermissionLevelResponseUser;
  };
  type ReposGetClonesResponseClonesItem = {
    count: number;
    timestamp: string;
    uniques: number;
  };
  type ReposGetClonesResponse = {
    clones: Array<ReposGetClonesResponseClonesItem>;
    count: number;
    uniques: number;
  };
  type ReposGetBranchProtectionResponseRestrictionsUsersItem = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type ReposGetBranchProtectionResponseRestrictionsTeamsItem = {
    description: string;
    html_url: string;
    id: number;
    members_url: string;
    name: string;
    node_id: string;
    parent: null;
    permission: string;
    privacy: string;
    repositories_url: string;
    slug: string;
    url: string;
  };
  type ReposGetBranchProtectionResponseRestrictionsAppsItemPermissions = {
    contents: string;
    issues: string;
    metadata: string;
    single_file: string;
  };
  type ReposGetBranchProtectionResponseRestrictionsAppsItemOwner = {
    avatar_url: string;
    description: string;
    events_url: string;
    hooks_url: string;
    id: number;
    issues_url: string;
    login: string;
    members_url: string;
    node_id: string;
    public_members_url: string;
    repos_url: string;
    url: string;
  };
  type ReposGetBranchProtectionResponseRestrictionsAppsItem = {
    created_at: string;
    description: string;
    events: Array<string>;
    external_url: string;
    html_url: string;
    id: number;
    name: string;
    node_id: string;
    owner: ReposGetBranchProtectionResponseRestrictionsAppsItemOwner;
    permissions: ReposGetBranchProtectionResponseRestrictionsAppsItemPermissions;
    slug: string;
    updated_at: string;
  };
  type ReposGetBranchProtectionResponseRestrictions = {
    apps: Array<ReposGetBranchProtectionResponseRestrictionsAppsItem>;
    apps_url: string;
    teams: Array<ReposGetBranchProtectionResponseRestrictionsTeamsItem>;
    teams_url: string;
    url: string;
    users: Array<ReposGetBranchProtectionResponseRestrictionsUsersItem>;
    users_url: string;
  };
  type ReposGetBranchProtectionResponseRequiredStatusChecks = {
    contexts: Array<string>;
    contexts_url: string;
    strict: boolean;
    url: string;
  };
  type ReposGetBranchProtectionResponseRequiredPullRequestReviewsDismissalRestrictionsUsersItem = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type ReposGetBranchProtectionResponseRequiredPullRequestReviewsDismissalRestrictionsTeamsItem = {
    description: string;
    html_url: string;
    id: number;
    members_url: string;
    name: string;
    node_id: string;
    parent: null;
    permission: string;
    privacy: string;
    repositories_url: string;
    slug: string;
    url: string;
  };
  type ReposGetBranchProtectionResponseRequiredPullRequestReviewsDismissalRestrictions = {
    teams: Array<
      ReposGetBranchProtectionResponseRequiredPullRequestReviewsDismissalRestrictionsTeamsItem
    >;
    teams_url: string;
    url: string;
    users: Array<
      ReposGetBranchProtectionResponseRequiredPullRequestReviewsDismissalRestrictionsUsersItem
    >;
    users_url: string;
  };
  type ReposGetBranchProtectionResponseRequiredPullRequestReviews = {
    dismiss_stale_reviews: boolean;
    dismissal_restrictions: ReposGetBranchProtectionResponseRequiredPullRequestReviewsDismissalRestrictions;
    require_code_owner_reviews: boolean;
    required_approving_review_count: number;
    url: string;
  };
  type ReposGetBranchProtectionResponseRequiredLinearHistory = {
    enabled: boolean;
  };
  type ReposGetBranchProtectionResponseEnforceAdmins = {
    enabled: boolean;
    url: string;
  };
  type ReposGetBranchProtectionResponseAllowForcePushes = { enabled: boolean };
  type ReposGetBranchProtectionResponseAllowDeletions = { enabled: boolean };
  type ReposGetBranchProtectionResponse = {
    allow_deletions: ReposGetBranchProtectionResponseAllowDeletions;
    allow_force_pushes: ReposGetBranchProtectionResponseAllowForcePushes;
    enforce_admins: ReposGetBranchProtectionResponseEnforceAdmins;
    required_linear_history: ReposGetBranchProtectionResponseRequiredLinearHistory;
    required_pull_request_reviews: ReposGetBranchProtectionResponseRequiredPullRequestReviews;
    required_status_checks: ReposGetBranchProtectionResponseRequiredStatusChecks;
    restrictions: ReposGetBranchProtectionResponseRestrictions;
    url: string;
  };
  type ReposGetBranchResponseProtectionRequiredStatusChecks = {
    contexts: Array<string>;
    enforcement_level: string;
  };
  type ReposGetBranchResponseProtection = {
    enabled: boolean;
    required_status_checks: ReposGetBranchResponseProtectionRequiredStatusChecks;
  };
  type ReposGetBranchResponseCommitParentsItem = { sha: string; url: string };
  type ReposGetBranchResponseCommitCommitter = {
    avatar_url: string;
    gravatar_id: string;
    id: number;
    login: string;
    url: string;
  };
  type ReposGetBranchResponseCommitCommitVerification = {
    payload: null;
    reason: string;
    signature: null;
    verified: boolean;
  };
  type ReposGetBranchResponseCommitCommitTree = { sha: string; url: string };
  type ReposGetBranchResponseCommitCommitCommitter = {
    date: string;
    email: string;
    name: string;
  };
  type ReposGetBranchResponseCommitCommitAuthor = {
    date: string;
    email: string;
    name: string;
  };
  type ReposGetBranchResponseCommitCommit = {
    author: ReposGetBranchResponseCommitCommitAuthor;
    committer: ReposGetBranchResponseCommitCommitCommitter;
    message: string;
    tree: ReposGetBranchResponseCommitCommitTree;
    url: string;
    verification: ReposGetBranchResponseCommitCommitVerification;
  };
  type ReposGetBranchResponseCommitAuthor = {
    avatar_url: string;
    gravatar_id: string;
    id: number;
    login: string;
    url: string;
  };
  type ReposGetBranchResponseCommit = {
    author: ReposGetBranchResponseCommitAuthor;
    commit: ReposGetBranchResponseCommitCommit;
    committer: ReposGetBranchResponseCommitCommitter;
    node_id: string;
    parents: Array<ReposGetBranchResponseCommitParentsItem>;
    sha: string;
    url: string;
  };
  type ReposGetBranchResponseLinks = { html: string; self: string };
  type ReposGetBranchResponse = {
    _links: ReposGetBranchResponseLinks;
    commit: ReposGetBranchResponseCommit;
    name: string;
    protected: boolean;
    protection: ReposGetBranchResponseProtection;
    protection_url: string;
  };
  type ReposGetAppsWithAccessToProtectedBranchResponseItemPermissions = {
    contents: string;
    issues: string;
    metadata: string;
    single_file: string;
  };
  type ReposGetAppsWithAccessToProtectedBranchResponseItemOwner = {
    avatar_url: string;
    description: string;
    events_url: string;
    hooks_url: string;
    id: number;
    issues_url: string;
    login: string;
    members_url: string;
    node_id: string;
    public_members_url: string;
    repos_url: string;
    url: string;
  };
  type ReposGetAppsWithAccessToProtectedBranchResponseItem = {
    created_at: string;
    description: string;
    events: Array<string>;
    external_url: string;
    html_url: string;
    id: number;
    name: string;
    node_id: string;
    owner: ReposGetAppsWithAccessToProtectedBranchResponseItemOwner;
    permissions: ReposGetAppsWithAccessToProtectedBranchResponseItemPermissions;
    slug: string;
    updated_at: string;
  };
  type ReposGetResponseSourcePermissions = {
    admin: boolean;
    pull: boolean;
    push: boolean;
  };
  type ReposGetResponseSourceOwner = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type ReposGetResponseSource = {
    allow_merge_commit: boolean;
    allow_rebase_merge: boolean;
    allow_squash_merge: boolean;
    archive_url: string;
    archived: boolean;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    clone_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    created_at: string;
    default_branch: string;
    deployments_url: string;
    description: string;
    disabled: boolean;
    downloads_url: string;
    events_url: string;
    fork: boolean;
    forks_count: number;
    forks_url: string;
    full_name: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    has_downloads: boolean;
    has_issues: boolean;
    has_pages: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    homepage: string;
    hooks_url: string;
    html_url: string;
    id: number;
    is_template: boolean;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    language: null;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    mirror_url: string;
    name: string;
    network_count: number;
    node_id: string;
    notifications_url: string;
    open_issues_count: number;
    owner: ReposGetResponseSourceOwner;
    permissions: ReposGetResponseSourcePermissions;
    private: boolean;
    pulls_url: string;
    pushed_at: string;
    releases_url: string;
    size: number;
    ssh_url: string;
    stargazers_count: number;
    stargazers_url: string;
    statuses_url: string;
    subscribers_count: number;
    subscribers_url: string;
    subscription_url: string;
    svn_url: string;
    tags_url: string;
    teams_url: string;
    temp_clone_token: string;
    template_repository: null;
    topics: Array<string>;
    trees_url: string;
    updated_at: string;
    url: string;
    visibility: string;
    watchers_count: number;
  };
  type ReposGetResponsePermissions = {
    admin: boolean;
    pull: boolean;
    push: boolean;
  };
  type ReposGetResponseParentPermissions = {
    admin: boolean;
    pull: boolean;
    push: boolean;
  };
  type ReposGetResponseParentOwner = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type ReposGetResponseParent = {
    allow_merge_commit: boolean;
    allow_rebase_merge: boolean;
    allow_squash_merge: boolean;
    archive_url: string;
    archived: boolean;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    clone_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    created_at: string;
    default_branch: string;
    deployments_url: string;
    description: string;
    disabled: boolean;
    downloads_url: string;
    events_url: string;
    fork: boolean;
    forks_count: number;
    forks_url: string;
    full_name: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    has_downloads: boolean;
    has_issues: boolean;
    has_pages: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    homepage: string;
    hooks_url: string;
    html_url: string;
    id: number;
    is_template: boolean;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    language: null;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    mirror_url: string;
    name: string;
    network_count: number;
    node_id: string;
    notifications_url: string;
    open_issues_count: number;
    owner: ReposGetResponseParentOwner;
    permissions: ReposGetResponseParentPermissions;
    private: boolean;
    pulls_url: string;
    pushed_at: string;
    releases_url: string;
    size: number;
    ssh_url: string;
    stargazers_count: number;
    stargazers_url: string;
    statuses_url: string;
    subscribers_count: number;
    subscribers_url: string;
    subscription_url: string;
    svn_url: string;
    tags_url: string;
    teams_url: string;
    temp_clone_token: string;
    template_repository: null;
    topics: Array<string>;
    trees_url: string;
    updated_at: string;
    url: string;
    visibility: string;
    watchers_count: number;
  };
  type ReposGetResponseOwner = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type ReposGetResponseOrganization = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type ReposGetResponseLicense = {
    key: string;
    name: string;
    node_id: string;
    spdx_id: string;
    url: string;
  };
  type ReposGetResponse = {
    allow_merge_commit: boolean;
    allow_rebase_merge: boolean;
    allow_squash_merge: boolean;
    archive_url: string;
    archived: boolean;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    clone_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    created_at: string;
    default_branch: string;
    deployments_url: string;
    description: string;
    disabled: boolean;
    downloads_url: string;
    events_url: string;
    fork: boolean;
    forks_count: number;
    forks_url: string;
    full_name: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    has_downloads: boolean;
    has_issues: boolean;
    has_pages: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    homepage: string;
    hooks_url: string;
    html_url: string;
    id: number;
    is_template: boolean;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    language: null;
    languages_url: string;
    license: ReposGetResponseLicense;
    merges_url: string;
    milestones_url: string;
    mirror_url: string;
    name: string;
    network_count: number;
    node_id: string;
    notifications_url: string;
    open_issues_count: number;
    organization: ReposGetResponseOrganization;
    owner: ReposGetResponseOwner;
    parent: ReposGetResponseParent;
    permissions: ReposGetResponsePermissions;
    private: boolean;
    pulls_url: string;
    pushed_at: string;
    releases_url: string;
    size: number;
    source: ReposGetResponseSource;
    ssh_url: string;
    stargazers_count: number;
    stargazers_url: string;
    statuses_url: string;
    subscribers_count: number;
    subscribers_url: string;
    subscription_url: string;
    svn_url: string;
    tags_url: string;
    teams_url: string;
    temp_clone_token: string;
    template_repository: null;
    topics: Array<string>;
    trees_url: string;
    updated_at: string;
    url: string;
    visibility: string;
    watchers_count: number;
  };
  type ReposEnablePagesSiteResponseSource = {
    branch: string;
    directory: string;
  };
  type ReposEnablePagesSiteResponse = {
    cname: string;
    custom_404: boolean;
    html_url: string;
    source: ReposEnablePagesSiteResponseSource;
    status: string;
    url: string;
  };
  type ReposDeleteFileResponseCommitVerification = {
    payload: null;
    reason: string;
    signature: null;
    verified: boolean;
  };
  type ReposDeleteFileResponseCommitTree = { sha: string; url: string };
  type ReposDeleteFileResponseCommitParentsItem = {
    html_url: string;
    sha: string;
    url: string;
  };
  type ReposDeleteFileResponseCommitCommitter = {
    date: string;
    email: string;
    name: string;
  };
  type ReposDeleteFileResponseCommitAuthor = {
    date: string;
    email: string;
    name: string;
  };
  type ReposDeleteFileResponseCommit = {
    author: ReposDeleteFileResponseCommitAuthor;
    committer: ReposDeleteFileResponseCommitCommitter;
    html_url: string;
    message: string;
    node_id: string;
    parents: Array<ReposDeleteFileResponseCommitParentsItem>;
    sha: string;
    tree: ReposDeleteFileResponseCommitTree;
    url: string;
    verification: ReposDeleteFileResponseCommitVerification;
  };
  type ReposDeleteFileResponse = {
    commit: ReposDeleteFileResponseCommit;
    content: null;
  };
  type ReposDeleteResponse = { documentation_url: string; message: string };
  type ReposCreateUsingTemplateResponseTemplateRepositoryPermissions = {
    admin: boolean;
    pull: boolean;
    push: boolean;
  };
  type ReposCreateUsingTemplateResponseTemplateRepositoryOwner = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type ReposCreateUsingTemplateResponseTemplateRepository = {
    allow_merge_commit: boolean;
    allow_rebase_merge: boolean;
    allow_squash_merge: boolean;
    archive_url: string;
    archived: boolean;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    clone_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    created_at: string;
    default_branch: string;
    deployments_url: string;
    description: string;
    disabled: boolean;
    downloads_url: string;
    events_url: string;
    fork: boolean;
    forks_count: number;
    forks_url: string;
    full_name: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    has_downloads: boolean;
    has_issues: boolean;
    has_pages: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    homepage: string;
    hooks_url: string;
    html_url: string;
    id: number;
    is_template: boolean;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    language: null;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    mirror_url: string;
    name: string;
    network_count: number;
    node_id: string;
    notifications_url: string;
    open_issues_count: number;
    owner: ReposCreateUsingTemplateResponseTemplateRepositoryOwner;
    permissions: ReposCreateUsingTemplateResponseTemplateRepositoryPermissions;
    private: boolean;
    pulls_url: string;
    pushed_at: string;
    releases_url: string;
    size: number;
    ssh_url: string;
    stargazers_count: number;
    stargazers_url: string;
    statuses_url: string;
    subscribers_count: number;
    subscribers_url: string;
    subscription_url: string;
    svn_url: string;
    tags_url: string;
    teams_url: string;
    temp_clone_token: string;
    template_repository: null;
    topics: Array<string>;
    trees_url: string;
    updated_at: string;
    url: string;
    visibility: string;
    watchers_count: number;
  };
  type ReposCreateUsingTemplateResponsePermissions = {
    admin: boolean;
    pull: boolean;
    push: boolean;
  };
  type ReposCreateUsingTemplateResponseOwner = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type ReposCreateUsingTemplateResponse = {
    allow_merge_commit: boolean;
    allow_rebase_merge: boolean;
    allow_squash_merge: boolean;
    archive_url: string;
    archived: boolean;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    clone_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    created_at: string;
    default_branch: string;
    deployments_url: string;
    description: string;
    disabled: boolean;
    downloads_url: string;
    events_url: string;
    fork: boolean;
    forks_count: number;
    forks_url: string;
    full_name: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    has_downloads: boolean;
    has_issues: boolean;
    has_pages: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    homepage: string;
    hooks_url: string;
    html_url: string;
    id: number;
    is_template: boolean;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    language: null;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    mirror_url: string;
    name: string;
    network_count: number;
    node_id: string;
    notifications_url: string;
    open_issues_count: number;
    owner: ReposCreateUsingTemplateResponseOwner;
    permissions: ReposCreateUsingTemplateResponsePermissions;
    private: boolean;
    pulls_url: string;
    pushed_at: string;
    releases_url: string;
    size: number;
    ssh_url: string;
    stargazers_count: number;
    stargazers_url: string;
    statuses_url: string;
    subscribers_count: number;
    subscribers_url: string;
    subscription_url: string;
    svn_url: string;
    tags_url: string;
    teams_url: string;
    temp_clone_token: string;
    template_repository: ReposCreateUsingTemplateResponseTemplateRepository;
    topics: Array<string>;
    trees_url: string;
    updated_at: string;
    url: string;
    visibility: string;
    watchers_count: number;
  };
  type ReposCreateStatusResponseCreator = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type ReposCreateStatusResponse = {
    avatar_url: string;
    context: string;
    created_at: string;
    creator: ReposCreateStatusResponseCreator;
    description: string;
    id: number;
    node_id: string;
    state: string;
    target_url: string;
    updated_at: string;
    url: string;
  };
  type ReposCreateReleaseResponseAuthor = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type ReposCreateReleaseResponse = {
    assets: Array<any>;
    assets_url: string;
    author: ReposCreateReleaseResponseAuthor;
    body: string;
    created_at: string;
    draft: boolean;
    html_url: string;
    id: number;
    name: string;
    node_id: string;
    prerelease: boolean;
    published_at: string;
    tag_name: string;
    tarball_url: string;
    target_commitish: string;
    upload_url: string;
    url: string;
    zipball_url: string;
  };
  type ReposCreateOrUpdateFileResponseContentLinks = {
    git: string;
    html: string;
    self: string;
  };
  type ReposCreateOrUpdateFileResponseContent = {
    _links: ReposCreateOrUpdateFileResponseContentLinks;
    download_url: string;
    git_url: string;
    html_url: string;
    name: string;
    path: string;
    sha: string;
    size: number;
    type: string;
    url: string;
  };
  type ReposCreateOrUpdateFileResponseCommitVerification = {
    payload: null;
    reason: string;
    signature: null;
    verified: boolean;
  };
  type ReposCreateOrUpdateFileResponseCommitTree = { sha: string; url: string };
  type ReposCreateOrUpdateFileResponseCommitParentsItem = {
    html_url: string;
    sha: string;
    url: string;
  };
  type ReposCreateOrUpdateFileResponseCommitCommitter = {
    date: string;
    email: string;
    name: string;
  };
  type ReposCreateOrUpdateFileResponseCommitAuthor = {
    date: string;
    email: string;
    name: string;
  };
  type ReposCreateOrUpdateFileResponseCommit = {
    author: ReposCreateOrUpdateFileResponseCommitAuthor;
    committer: ReposCreateOrUpdateFileResponseCommitCommitter;
    html_url: string;
    message: string;
    node_id: string;
    parents: Array<ReposCreateOrUpdateFileResponseCommitParentsItem>;
    sha: string;
    tree: ReposCreateOrUpdateFileResponseCommitTree;
    url: string;
    verification: ReposCreateOrUpdateFileResponseCommitVerification;
  };
  type ReposCreateOrUpdateFileResponse = {
    commit: ReposCreateOrUpdateFileResponseCommit;
    content: ReposCreateOrUpdateFileResponseContent;
  };
  type ReposCreateInOrgResponsePermissions = {
    admin: boolean;
    pull: boolean;
    push: boolean;
  };
  type ReposCreateInOrgResponseOwner = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type ReposCreateInOrgResponse = {
    allow_merge_commit: boolean;
    allow_rebase_merge: boolean;
    allow_squash_merge: boolean;
    archive_url: string;
    archived: boolean;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    clone_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    created_at: string;
    default_branch: string;
    deployments_url: string;
    description: string;
    disabled: boolean;
    downloads_url: string;
    events_url: string;
    fork: boolean;
    forks_count: number;
    forks_url: string;
    full_name: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    has_downloads: boolean;
    has_issues: boolean;
    has_pages: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    homepage: string;
    hooks_url: string;
    html_url: string;
    id: number;
    is_template: boolean;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    language: null;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    mirror_url: string;
    name: string;
    network_count: number;
    node_id: string;
    notifications_url: string;
    open_issues_count: number;
    owner: ReposCreateInOrgResponseOwner;
    permissions: ReposCreateInOrgResponsePermissions;
    private: boolean;
    pulls_url: string;
    pushed_at: string;
    releases_url: string;
    size: number;
    ssh_url: string;
    stargazers_count: number;
    stargazers_url: string;
    statuses_url: string;
    subscribers_count: number;
    subscribers_url: string;
    subscription_url: string;
    svn_url: string;
    tags_url: string;
    teams_url: string;
    temp_clone_token: string;
    template_repository: null;
    topics: Array<string>;
    trees_url: string;
    updated_at: string;
    url: string;
    visibility: string;
    watchers_count: number;
  };
  type ReposCreateHookResponseLastResponse = {
    code: null;
    message: null;
    status: string;
  };
  type ReposCreateHookResponseConfig = {
    content_type: string;
    insecure_ssl: string;
    url: string;
  };
  type ReposCreateHookResponse = {
    active: boolean;
    config: ReposCreateHookResponseConfig;
    created_at: string;
    events: Array<string>;
    id: number;
    last_response: ReposCreateHookResponseLastResponse;
    name: string;
    ping_url: string;
    test_url: string;
    type: string;
    updated_at: string;
    url: string;
  };
  type ReposCreateForkResponsePermissions = {
    admin: boolean;
    pull: boolean;
    push: boolean;
  };
  type ReposCreateForkResponseOwner = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type ReposCreateForkResponse = {
    allow_merge_commit: boolean;
    allow_rebase_merge: boolean;
    allow_squash_merge: boolean;
    archive_url: string;
    archived: boolean;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    clone_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    created_at: string;
    default_branch: string;
    deployments_url: string;
    description: string;
    disabled: boolean;
    downloads_url: string;
    events_url: string;
    fork: boolean;
    forks_count: number;
    forks_url: string;
    full_name: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    has_downloads: boolean;
    has_issues: boolean;
    has_pages: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    homepage: string;
    hooks_url: string;
    html_url: string;
    id: number;
    is_template: boolean;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    language: null;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    mirror_url: string;
    name: string;
    network_count: number;
    node_id: string;
    notifications_url: string;
    open_issues_count: number;
    owner: ReposCreateForkResponseOwner;
    permissions: ReposCreateForkResponsePermissions;
    private: boolean;
    pulls_url: string;
    pushed_at: string;
    releases_url: string;
    size: number;
    ssh_url: string;
    stargazers_count: number;
    stargazers_url: string;
    statuses_url: string;
    subscribers_count: number;
    subscribers_url: string;
    subscription_url: string;
    svn_url: string;
    tags_url: string;
    teams_url: string;
    temp_clone_token: string;
    template_repository: null;
    topics: Array<string>;
    trees_url: string;
    updated_at: string;
    url: string;
    visibility: string;
    watchers_count: number;
  };
  type ReposCreateForAuthenticatedUserResponsePermissions = {
    admin: boolean;
    pull: boolean;
    push: boolean;
  };
  type ReposCreateForAuthenticatedUserResponseOwner = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type ReposCreateForAuthenticatedUserResponse = {
    allow_merge_commit: boolean;
    allow_rebase_merge: boolean;
    allow_squash_merge: boolean;
    archive_url: string;
    archived: boolean;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    clone_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    created_at: string;
    default_branch: string;
    deployments_url: string;
    description: string;
    disabled: boolean;
    downloads_url: string;
    events_url: string;
    fork: boolean;
    forks_count: number;
    forks_url: string;
    full_name: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    has_downloads: boolean;
    has_issues: boolean;
    has_pages: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    homepage: string;
    hooks_url: string;
    html_url: string;
    id: number;
    is_template: boolean;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    language: null;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    mirror_url: string;
    name: string;
    network_count: number;
    node_id: string;
    notifications_url: string;
    open_issues_count: number;
    owner: ReposCreateForAuthenticatedUserResponseOwner;
    permissions: ReposCreateForAuthenticatedUserResponsePermissions;
    private: boolean;
    pulls_url: string;
    pushed_at: string;
    releases_url: string;
    size: number;
    ssh_url: string;
    stargazers_count: number;
    stargazers_url: string;
    statuses_url: string;
    subscribers_count: number;
    subscribers_url: string;
    subscription_url: string;
    svn_url: string;
    tags_url: string;
    teams_url: string;
    temp_clone_token: string;
    template_repository: null;
    topics: Array<string>;
    trees_url: string;
    updated_at: string;
    url: string;
    visibility: string;
    watchers_count: number;
  };
  type ReposCreateFileResponseContentLinks = {
    git: string;
    html: string;
    self: string;
  };
  type ReposCreateFileResponseContent = {
    _links: ReposCreateFileResponseContentLinks;
    download_url: string;
    git_url: string;
    html_url: string;
    name: string;
    path: string;
    sha: string;
    size: number;
    type: string;
    url: string;
  };
  type ReposCreateFileResponseCommitVerification = {
    payload: null;
    reason: string;
    signature: null;
    verified: boolean;
  };
  type ReposCreateFileResponseCommitTree = { sha: string; url: string };
  type ReposCreateFileResponseCommitParentsItem = {
    html_url: string;
    sha: string;
    url: string;
  };
  type ReposCreateFileResponseCommitCommitter = {
    date: string;
    email: string;
    name: string;
  };
  type ReposCreateFileResponseCommitAuthor = {
    date: string;
    email: string;
    name: string;
  };
  type ReposCreateFileResponseCommit = {
    author: ReposCreateFileResponseCommitAuthor;
    committer: ReposCreateFileResponseCommitCommitter;
    html_url: string;
    message: string;
    node_id: string;
    parents: Array<ReposCreateFileResponseCommitParentsItem>;
    sha: string;
    tree: ReposCreateFileResponseCommitTree;
    url: string;
    verification: ReposCreateFileResponseCommitVerification;
  };
  type ReposCreateFileResponse = {
    commit: ReposCreateFileResponseCommit;
    content: ReposCreateFileResponseContent;
  };
  type ReposCreateDeploymentStatusResponseCreator = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type ReposCreateDeploymentStatusResponse = {
    created_at: string;
    creator: ReposCreateDeploymentStatusResponseCreator;
    deployment_url: string;
    description: string;
    environment: string;
    environment_url: string;
    id: number;
    log_url: string;
    node_id: string;
    repository_url: string;
    state: string;
    target_url: string;
    updated_at: string;
    url: string;
  };
  type ReposCreateDeploymentResponsePayload = { deploy: string };
  type ReposCreateDeploymentResponseCreator = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type ReposCreateDeploymentResponse = {
    created_at: string;
    creator: ReposCreateDeploymentResponseCreator;
    description: string;
    environment: string;
    id: number;
    node_id: string;
    original_environment: string;
    payload: ReposCreateDeploymentResponsePayload;
    production_environment: boolean;
    ref: string;
    repository_url: string;
    sha: string;
    statuses_url: string;
    task: string;
    transient_environment: boolean;
    updated_at: string;
    url: string;
  };
  type ReposCreateCommitCommentResponseUser = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type ReposCreateCommitCommentResponse = {
    body: string;
    commit_id: string;
    created_at: string;
    html_url: string;
    id: number;
    line: number;
    node_id: string;
    path: string;
    position: number;
    updated_at: string;
    url: string;
    user: ReposCreateCommitCommentResponseUser;
  };
  type ReposCompareCommitsResponseMergeBaseCommitParentsItem = {
    sha: string;
    url: string;
  };
  type ReposCompareCommitsResponseMergeBaseCommitCommitter = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type ReposCompareCommitsResponseMergeBaseCommitCommitVerification = {
    payload: null;
    reason: string;
    signature: null;
    verified: boolean;
  };
  type ReposCompareCommitsResponseMergeBaseCommitCommitTree = {
    sha: string;
    url: string;
  };
  type ReposCompareCommitsResponseMergeBaseCommitCommitCommitter = {
    date: string;
    email: string;
    name: string;
  };
  type ReposCompareCommitsResponseMergeBaseCommitCommitAuthor = {
    date: string;
    email: string;
    name: string;
  };
  type ReposCompareCommitsResponseMergeBaseCommitCommit = {
    author: ReposCompareCommitsResponseMergeBaseCommitCommitAuthor;
    comment_count: number;
    committer: ReposCompareCommitsResponseMergeBaseCommitCommitCommitter;
    message: string;
    tree: ReposCompareCommitsResponseMergeBaseCommitCommitTree;
    url: string;
    verification: ReposCompareCommitsResponseMergeBaseCommitCommitVerification;
  };
  type ReposCompareCommitsResponseMergeBaseCommitAuthor = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type ReposCompareCommitsResponseMergeBaseCommit = {
    author: ReposCompareCommitsResponseMergeBaseCommitAuthor;
    comments_url: string;
    commit: ReposCompareCommitsResponseMergeBaseCommitCommit;
    committer: ReposCompareCommitsResponseMergeBaseCommitCommitter;
    html_url: string;
    node_id: string;
    parents: Array<ReposCompareCommitsResponseMergeBaseCommitParentsItem>;
    sha: string;
    url: string;
  };
  type ReposCompareCommitsResponseFilesItem = {
    additions: number;
    blob_url: string;
    changes: number;
    contents_url: string;
    deletions: number;
    filename: string;
    patch: string;
    raw_url: string;
    sha: string;
    status: string;
  };
  type ReposCompareCommitsResponseCommitsItemParentsItem = {
    sha: string;
    url: string;
  };
  type ReposCompareCommitsResponseCommitsItemCommitter = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type ReposCompareCommitsResponseCommitsItemCommitVerification = {
    payload: null;
    reason: string;
    signature: null;
    verified: boolean;
  };
  type ReposCompareCommitsResponseCommitsItemCommitTree = {
    sha: string;
    url: string;
  };
  type ReposCompareCommitsResponseCommitsItemCommitCommitter = {
    date: string;
    email: string;
    name: string;
  };
  type ReposCompareCommitsResponseCommitsItemCommitAuthor = {
    date: string;
    email: string;
    name: string;
  };
  type ReposCompareCommitsResponseCommitsItemCommit = {
    author: ReposCompareCommitsResponseCommitsItemCommitAuthor;
    comment_count: number;
    committer: ReposCompareCommitsResponseCommitsItemCommitCommitter;
    message: string;
    tree: ReposCompareCommitsResponseCommitsItemCommitTree;
    url: string;
    verification: ReposCompareCommitsResponseCommitsItemCommitVerification;
  };
  type ReposCompareCommitsResponseCommitsItemAuthor = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type ReposCompareCommitsResponseCommitsItem = {
    author: ReposCompareCommitsResponseCommitsItemAuthor;
    comments_url: string;
    commit: ReposCompareCommitsResponseCommitsItemCommit;
    committer: ReposCompareCommitsResponseCommitsItemCommitter;
    html_url: string;
    node_id: string;
    parents: Array<ReposCompareCommitsResponseCommitsItemParentsItem>;
    sha: string;
    url: string;
  };
  type ReposCompareCommitsResponseBaseCommitParentsItem = {
    sha: string;
    url: string;
  };
  type ReposCompareCommitsResponseBaseCommitCommitter = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type ReposCompareCommitsResponseBaseCommitCommitVerification = {
    payload: null;
    reason: string;
    signature: null;
    verified: boolean;
  };
  type ReposCompareCommitsResponseBaseCommitCommitTree = {
    sha: string;
    url: string;
  };
  type ReposCompareCommitsResponseBaseCommitCommitCommitter = {
    date: string;
    email: string;
    name: string;
  };
  type ReposCompareCommitsResponseBaseCommitCommitAuthor = {
    date: string;
    email: string;
    name: string;
  };
  type ReposCompareCommitsResponseBaseCommitCommit = {
    author: ReposCompareCommitsResponseBaseCommitCommitAuthor;
    comment_count: number;
    committer: ReposCompareCommitsResponseBaseCommitCommitCommitter;
    message: string;
    tree: ReposCompareCommitsResponseBaseCommitCommitTree;
    url: string;
    verification: ReposCompareCommitsResponseBaseCommitCommitVerification;
  };
  type ReposCompareCommitsResponseBaseCommitAuthor = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type ReposCompareCommitsResponseBaseCommit = {
    author: ReposCompareCommitsResponseBaseCommitAuthor;
    comments_url: string;
    commit: ReposCompareCommitsResponseBaseCommitCommit;
    committer: ReposCompareCommitsResponseBaseCommitCommitter;
    html_url: string;
    node_id: string;
    parents: Array<ReposCompareCommitsResponseBaseCommitParentsItem>;
    sha: string;
    url: string;
  };
  type ReposCompareCommitsResponse = {
    ahead_by: number;
    base_commit: ReposCompareCommitsResponseBaseCommit;
    behind_by: number;
    commits: Array<ReposCompareCommitsResponseCommitsItem>;
    diff_url: string;
    files: Array<ReposCompareCommitsResponseFilesItem>;
    html_url: string;
    merge_base_commit: ReposCompareCommitsResponseMergeBaseCommit;
    patch_url: string;
    permalink_url: string;
    status: string;
    total_commits: number;
    url: string;
  };
  type ReposAddProtectedBranchUserRestrictionsResponseItem = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type ReposAddProtectedBranchTeamRestrictionsResponseItem = {
    description: string;
    html_url: string;
    id: number;
    members_url: string;
    name: string;
    node_id: string;
    parent: null;
    permission: string;
    privacy: string;
    repositories_url: string;
    slug: string;
    url: string;
  };
  type ReposAddProtectedBranchRequiredSignaturesResponse = {
    enabled: boolean;
    url: string;
  };
  type ReposAddProtectedBranchAppRestrictionsResponseItemPermissions = {
    contents: string;
    issues: string;
    metadata: string;
    single_file: string;
  };
  type ReposAddProtectedBranchAppRestrictionsResponseItemOwner = {
    avatar_url: string;
    description: string;
    events_url: string;
    hooks_url: string;
    id: number;
    issues_url: string;
    login: string;
    members_url: string;
    node_id: string;
    public_members_url: string;
    repos_url: string;
    url: string;
  };
  type ReposAddProtectedBranchAppRestrictionsResponseItem = {
    created_at: string;
    description: string;
    events: Array<string>;
    external_url: string;
    html_url: string;
    id: number;
    name: string;
    node_id: string;
    owner: ReposAddProtectedBranchAppRestrictionsResponseItemOwner;
    permissions: ReposAddProtectedBranchAppRestrictionsResponseItemPermissions;
    slug: string;
    updated_at: string;
  };
  type ReposAddProtectedBranchAdminEnforcementResponse = {
    enabled: boolean;
    url: string;
  };
  type ReposAddDeployKeyResponse = {
    created_at: string;
    id: number;
    key: string;
    read_only: boolean;
    title: string;
    url: string;
    verified: boolean;
  };
  type ReposAddCollaboratorResponseRepositoryOwner = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type ReposAddCollaboratorResponseRepository = {
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    description: string;
    downloads_url: string;
    events_url: string;
    fork: boolean;
    forks_url: string;
    full_name: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    html_url: string;
    id: number;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    name: string;
    node_id: string;
    notifications_url: string;
    owner: ReposAddCollaboratorResponseRepositoryOwner;
    private: boolean;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    url: string;
  };
  type ReposAddCollaboratorResponseInviter = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type ReposAddCollaboratorResponseInvitee = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type ReposAddCollaboratorResponse = {
    created_at: string;
    html_url: string;
    id: number;
    invitee: ReposAddCollaboratorResponseInvitee;
    inviter: ReposAddCollaboratorResponseInviter;
    permissions: string;
    repository: ReposAddCollaboratorResponseRepository;
    url: string;
  };
  type ReactionsListForTeamDiscussionLegacyResponseItemUser = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type ReactionsListForTeamDiscussionLegacyResponseItem = {
    content: string;
    created_at: string;
    id: number;
    node_id: string;
    user: ReactionsListForTeamDiscussionLegacyResponseItemUser;
  };
  type ReactionsListForTeamDiscussionInOrgResponseItemUser = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type ReactionsListForTeamDiscussionInOrgResponseItem = {
    content: string;
    created_at: string;
    id: number;
    node_id: string;
    user: ReactionsListForTeamDiscussionInOrgResponseItemUser;
  };
  type ReactionsListForTeamDiscussionCommentLegacyResponseItemUser = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type ReactionsListForTeamDiscussionCommentLegacyResponseItem = {
    content: string;
    created_at: string;
    id: number;
    node_id: string;
    user: ReactionsListForTeamDiscussionCommentLegacyResponseItemUser;
  };
  type ReactionsListForTeamDiscussionCommentInOrgResponseItemUser = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type ReactionsListForTeamDiscussionCommentInOrgResponseItem = {
    content: string;
    created_at: string;
    id: number;
    node_id: string;
    user: ReactionsListForTeamDiscussionCommentInOrgResponseItemUser;
  };
  type ReactionsListForTeamDiscussionCommentResponseItemUser = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type ReactionsListForTeamDiscussionCommentResponseItem = {
    content: string;
    created_at: string;
    id: number;
    node_id: string;
    user: ReactionsListForTeamDiscussionCommentResponseItemUser;
  };
  type ReactionsListForTeamDiscussionResponseItemUser = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type ReactionsListForTeamDiscussionResponseItem = {
    content: string;
    created_at: string;
    id: number;
    node_id: string;
    user: ReactionsListForTeamDiscussionResponseItemUser;
  };
  type ReactionsListForPullRequestReviewCommentResponseItemUser = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type ReactionsListForPullRequestReviewCommentResponseItem = {
    content: string;
    created_at: string;
    id: number;
    node_id: string;
    user: ReactionsListForPullRequestReviewCommentResponseItemUser;
  };
  type ReactionsListForIssueCommentResponseItemUser = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type ReactionsListForIssueCommentResponseItem = {
    content: string;
    created_at: string;
    id: number;
    node_id: string;
    user: ReactionsListForIssueCommentResponseItemUser;
  };
  type ReactionsListForIssueResponseItemUser = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type ReactionsListForIssueResponseItem = {
    content: string;
    created_at: string;
    id: number;
    node_id: string;
    user: ReactionsListForIssueResponseItemUser;
  };
  type ReactionsListForCommitCommentResponseItemUser = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type ReactionsListForCommitCommentResponseItem = {
    content: string;
    created_at: string;
    id: number;
    node_id: string;
    user: ReactionsListForCommitCommentResponseItemUser;
  };
  type ReactionsCreateForTeamDiscussionLegacyResponseUser = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type ReactionsCreateForTeamDiscussionLegacyResponse = {
    content: string;
    created_at: string;
    id: number;
    node_id: string;
    user: ReactionsCreateForTeamDiscussionLegacyResponseUser;
  };
  type ReactionsCreateForTeamDiscussionInOrgResponseUser = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type ReactionsCreateForTeamDiscussionInOrgResponse = {
    content: string;
    created_at: string;
    id: number;
    node_id: string;
    user: ReactionsCreateForTeamDiscussionInOrgResponseUser;
  };
  type ReactionsCreateForTeamDiscussionCommentLegacyResponseUser = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type ReactionsCreateForTeamDiscussionCommentLegacyResponse = {
    content: string;
    created_at: string;
    id: number;
    node_id: string;
    user: ReactionsCreateForTeamDiscussionCommentLegacyResponseUser;
  };
  type ReactionsCreateForTeamDiscussionCommentInOrgResponseUser = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type ReactionsCreateForTeamDiscussionCommentInOrgResponse = {
    content: string;
    created_at: string;
    id: number;
    node_id: string;
    user: ReactionsCreateForTeamDiscussionCommentInOrgResponseUser;
  };
  type ReactionsCreateForTeamDiscussionCommentResponseUser = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type ReactionsCreateForTeamDiscussionCommentResponse = {
    content: string;
    created_at: string;
    id: number;
    node_id: string;
    user: ReactionsCreateForTeamDiscussionCommentResponseUser;
  };
  type ReactionsCreateForTeamDiscussionResponseUser = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type ReactionsCreateForTeamDiscussionResponse = {
    content: string;
    created_at: string;
    id: number;
    node_id: string;
    user: ReactionsCreateForTeamDiscussionResponseUser;
  };
  type ReactionsCreateForPullRequestReviewCommentResponseUser = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type ReactionsCreateForPullRequestReviewCommentResponse = {
    content: string;
    created_at: string;
    id: number;
    node_id: string;
    user: ReactionsCreateForPullRequestReviewCommentResponseUser;
  };
  type ReactionsCreateForIssueCommentResponseUser = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type ReactionsCreateForIssueCommentResponse = {
    content: string;
    created_at: string;
    id: number;
    node_id: string;
    user: ReactionsCreateForIssueCommentResponseUser;
  };
  type ReactionsCreateForIssueResponseUser = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type ReactionsCreateForIssueResponse = {
    content: string;
    created_at: string;
    id: number;
    node_id: string;
    user: ReactionsCreateForIssueResponseUser;
  };
  type ReactionsCreateForCommitCommentResponseUser = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type ReactionsCreateForCommitCommentResponse = {
    content: string;
    created_at: string;
    id: number;
    node_id: string;
    user: ReactionsCreateForCommitCommentResponseUser;
  };
  type RateLimitGetResponseResourcesSearch = {
    limit: number;
    remaining: number;
    reset: number;
  };
  type RateLimitGetResponseResourcesIntegrationManifest = {
    limit: number;
    remaining: number;
    reset: number;
  };
  type RateLimitGetResponseResourcesGraphql = {
    limit: number;
    remaining: number;
    reset: number;
  };
  type RateLimitGetResponseResourcesCore = {
    limit: number;
    remaining: number;
    reset: number;
  };
  type RateLimitGetResponseResources = {
    core: RateLimitGetResponseResourcesCore;
    graphql: RateLimitGetResponseResourcesGraphql;
    integration_manifest: RateLimitGetResponseResourcesIntegrationManifest;
    search: RateLimitGetResponseResourcesSearch;
  };
  type RateLimitGetResponseRate = {
    limit: number;
    remaining: number;
    reset: number;
  };
  type RateLimitGetResponse = {
    rate: RateLimitGetResponseRate;
    resources: RateLimitGetResponseResources;
  };
  type PullsUpdateReviewResponseUser = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type PullsUpdateReviewResponseLinksPullRequest = { href: string };
  type PullsUpdateReviewResponseLinksHtml = { href: string };
  type PullsUpdateReviewResponseLinks = {
    html: PullsUpdateReviewResponseLinksHtml;
    pull_request: PullsUpdateReviewResponseLinksPullRequest;
  };
  type PullsUpdateReviewResponse = {
    _links: PullsUpdateReviewResponseLinks;
    body: string;
    commit_id: string;
    html_url: string;
    id: number;
    node_id: string;
    pull_request_url: string;
    state: string;
    user: PullsUpdateReviewResponseUser;
  };
  type PullsUpdateCommentResponseUser = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type PullsUpdateCommentResponseLinksSelf = { href: string };
  type PullsUpdateCommentResponseLinksPullRequest = { href: string };
  type PullsUpdateCommentResponseLinksHtml = { href: string };
  type PullsUpdateCommentResponseLinks = {
    html: PullsUpdateCommentResponseLinksHtml;
    pull_request: PullsUpdateCommentResponseLinksPullRequest;
    self: PullsUpdateCommentResponseLinksSelf;
  };
  type PullsUpdateCommentResponse = {
    _links: PullsUpdateCommentResponseLinks;
    author_association: string;
    body: string;
    commit_id: string;
    created_at: string;
    diff_hunk: string;
    html_url: string;
    id: number;
    in_reply_to_id: number;
    line: number;
    node_id: string;
    original_commit_id: string;
    original_line: number;
    original_position: number;
    original_start_line: number;
    path: string;
    position: number;
    pull_request_review_id: number;
    pull_request_url: string;
    side: string;
    start_line: number;
    start_side: string;
    updated_at: string;
    url: string;
    user: PullsUpdateCommentResponseUser;
  };
  type PullsUpdateBranchResponse = { message: string; url: string };
  type PullsUpdateResponseUser = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type PullsUpdateResponseRequestedTeamsItem = {
    description: string;
    html_url: string;
    id: number;
    members_url: string;
    name: string;
    node_id: string;
    parent: null;
    permission: string;
    privacy: string;
    repositories_url: string;
    slug: string;
    url: string;
  };
  type PullsUpdateResponseRequestedReviewersItem = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type PullsUpdateResponseMilestoneCreator = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type PullsUpdateResponseMilestone = {
    closed_at: string;
    closed_issues: number;
    created_at: string;
    creator: PullsUpdateResponseMilestoneCreator;
    description: string;
    due_on: string;
    html_url: string;
    id: number;
    labels_url: string;
    node_id: string;
    number: number;
    open_issues: number;
    state: string;
    title: string;
    updated_at: string;
    url: string;
  };
  type PullsUpdateResponseMergedBy = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type PullsUpdateResponseLabelsItem = {
    color: string;
    default: boolean;
    description: string;
    id: number;
    name: string;
    node_id: string;
    url: string;
  };
  type PullsUpdateResponseHeadUser = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type PullsUpdateResponseHeadRepoPermissions = {
    admin: boolean;
    pull: boolean;
    push: boolean;
  };
  type PullsUpdateResponseHeadRepoOwner = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type PullsUpdateResponseHeadRepo = {
    allow_merge_commit: boolean;
    allow_rebase_merge: boolean;
    allow_squash_merge: boolean;
    archive_url: string;
    archived: boolean;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    clone_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    created_at: string;
    default_branch: string;
    deployments_url: string;
    description: string;
    disabled: boolean;
    downloads_url: string;
    events_url: string;
    fork: boolean;
    forks_count: number;
    forks_url: string;
    full_name: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    has_downloads: boolean;
    has_issues: boolean;
    has_pages: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    homepage: string;
    hooks_url: string;
    html_url: string;
    id: number;
    is_template: boolean;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    language: null;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    mirror_url: string;
    name: string;
    network_count: number;
    node_id: string;
    notifications_url: string;
    open_issues_count: number;
    owner: PullsUpdateResponseHeadRepoOwner;
    permissions: PullsUpdateResponseHeadRepoPermissions;
    private: boolean;
    pulls_url: string;
    pushed_at: string;
    releases_url: string;
    size: number;
    ssh_url: string;
    stargazers_count: number;
    stargazers_url: string;
    statuses_url: string;
    subscribers_count: number;
    subscribers_url: string;
    subscription_url: string;
    svn_url: string;
    tags_url: string;
    teams_url: string;
    temp_clone_token: string;
    template_repository: null;
    topics: Array<string>;
    trees_url: string;
    updated_at: string;
    url: string;
    visibility: string;
    watchers_count: number;
  };
  type PullsUpdateResponseHead = {
    label: string;
    ref: string;
    repo: PullsUpdateResponseHeadRepo;
    sha: string;
    user: PullsUpdateResponseHeadUser;
  };
  type PullsUpdateResponseBaseUser = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type PullsUpdateResponseBaseRepoPermissions = {
    admin: boolean;
    pull: boolean;
    push: boolean;
  };
  type PullsUpdateResponseBaseRepoOwner = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type PullsUpdateResponseBaseRepo = {
    allow_merge_commit: boolean;
    allow_rebase_merge: boolean;
    allow_squash_merge: boolean;
    archive_url: string;
    archived: boolean;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    clone_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    created_at: string;
    default_branch: string;
    deployments_url: string;
    description: string;
    disabled: boolean;
    downloads_url: string;
    events_url: string;
    fork: boolean;
    forks_count: number;
    forks_url: string;
    full_name: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    has_downloads: boolean;
    has_issues: boolean;
    has_pages: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    homepage: string;
    hooks_url: string;
    html_url: string;
    id: number;
    is_template: boolean;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    language: null;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    mirror_url: string;
    name: string;
    network_count: number;
    node_id: string;
    notifications_url: string;
    open_issues_count: number;
    owner: PullsUpdateResponseBaseRepoOwner;
    permissions: PullsUpdateResponseBaseRepoPermissions;
    private: boolean;
    pulls_url: string;
    pushed_at: string;
    releases_url: string;
    size: number;
    ssh_url: string;
    stargazers_count: number;
    stargazers_url: string;
    statuses_url: string;
    subscribers_count: number;
    subscribers_url: string;
    subscription_url: string;
    svn_url: string;
    tags_url: string;
    teams_url: string;
    temp_clone_token: string;
    template_repository: null;
    topics: Array<string>;
    trees_url: string;
    updated_at: string;
    url: string;
    visibility: string;
    watchers_count: number;
  };
  type PullsUpdateResponseBase = {
    label: string;
    ref: string;
    repo: PullsUpdateResponseBaseRepo;
    sha: string;
    user: PullsUpdateResponseBaseUser;
  };
  type PullsUpdateResponseAssigneesItem = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type PullsUpdateResponseAssignee = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type PullsUpdateResponseLinksStatuses = { href: string };
  type PullsUpdateResponseLinksSelf = { href: string };
  type PullsUpdateResponseLinksReviewComments = { href: string };
  type PullsUpdateResponseLinksReviewComment = { href: string };
  type PullsUpdateResponseLinksIssue = { href: string };
  type PullsUpdateResponseLinksHtml = { href: string };
  type PullsUpdateResponseLinksCommits = { href: string };
  type PullsUpdateResponseLinksComments = { href: string };
  type PullsUpdateResponseLinks = {
    comments: PullsUpdateResponseLinksComments;
    commits: PullsUpdateResponseLinksCommits;
    html: PullsUpdateResponseLinksHtml;
    issue: PullsUpdateResponseLinksIssue;
    review_comment: PullsUpdateResponseLinksReviewComment;
    review_comments: PullsUpdateResponseLinksReviewComments;
    self: PullsUpdateResponseLinksSelf;
    statuses: PullsUpdateResponseLinksStatuses;
  };
  type PullsUpdateResponse = {
    _links: PullsUpdateResponseLinks;
    active_lock_reason: string;
    additions: number;
    assignee: PullsUpdateResponseAssignee;
    assignees: Array<PullsUpdateResponseAssigneesItem>;
    author_association: string;
    base: PullsUpdateResponseBase;
    body: string;
    changed_files: number;
    closed_at: string;
    comments: number;
    comments_url: string;
    commits: number;
    commits_url: string;
    created_at: string;
    deletions: number;
    diff_url: string;
    draft: boolean;
    head: PullsUpdateResponseHead;
    html_url: string;
    id: number;
    issue_url: string;
    labels: Array<PullsUpdateResponseLabelsItem>;
    locked: boolean;
    maintainer_can_modify: boolean;
    merge_commit_sha: string;
    mergeable: boolean;
    mergeable_state: string;
    merged: boolean;
    merged_at: string;
    merged_by: PullsUpdateResponseMergedBy;
    milestone: PullsUpdateResponseMilestone;
    node_id: string;
    number: number;
    patch_url: string;
    rebaseable: boolean;
    requested_reviewers: Array<PullsUpdateResponseRequestedReviewersItem>;
    requested_teams: Array<PullsUpdateResponseRequestedTeamsItem>;
    review_comment_url: string;
    review_comments: number;
    review_comments_url: string;
    state: string;
    statuses_url: string;
    title: string;
    updated_at: string;
    url: string;
    user: PullsUpdateResponseUser;
  };
  type PullsSubmitReviewResponseUser = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type PullsSubmitReviewResponseLinksPullRequest = { href: string };
  type PullsSubmitReviewResponseLinksHtml = { href: string };
  type PullsSubmitReviewResponseLinks = {
    html: PullsSubmitReviewResponseLinksHtml;
    pull_request: PullsSubmitReviewResponseLinksPullRequest;
  };
  type PullsSubmitReviewResponse = {
    _links: PullsSubmitReviewResponseLinks;
    body: string;
    commit_id: string;
    html_url: string;
    id: number;
    node_id: string;
    pull_request_url: string;
    state: string;
    submitted_at: string;
    user: PullsSubmitReviewResponseUser;
  };
  type PullsMergeResponse = { merged: boolean; message: string; sha: string };
  type PullsListReviewsResponseItemUser = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type PullsListReviewsResponseItemLinksPullRequest = { href: string };
  type PullsListReviewsResponseItemLinksHtml = { href: string };
  type PullsListReviewsResponseItemLinks = {
    html: PullsListReviewsResponseItemLinksHtml;
    pull_request: PullsListReviewsResponseItemLinksPullRequest;
  };
  type PullsListReviewsResponseItem = {
    _links: PullsListReviewsResponseItemLinks;
    body: string;
    commit_id: string;
    html_url: string;
    id: number;
    node_id: string;
    pull_request_url: string;
    state: string;
    submitted_at: string;
    user: PullsListReviewsResponseItemUser;
  };
  type PullsListReviewRequestsResponseUsersItem = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type PullsListReviewRequestsResponseTeamsItem = {
    description: string;
    html_url: string;
    id: number;
    members_url: string;
    name: string;
    node_id: string;
    parent: null;
    permission: string;
    privacy: string;
    repositories_url: string;
    slug: string;
    url: string;
  };
  type PullsListReviewRequestsResponse = {
    teams: Array<PullsListReviewRequestsResponseTeamsItem>;
    users: Array<PullsListReviewRequestsResponseUsersItem>;
  };
  type PullsListFilesResponseItem = {
    additions: number;
    blob_url: string;
    changes: number;
    contents_url: string;
    deletions: number;
    filename: string;
    patch: string;
    raw_url: string;
    sha: string;
    status: string;
  };
  type PullsListCommitsResponseItemParentsItem = { sha: string; url: string };
  type PullsListCommitsResponseItemCommitter = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type PullsListCommitsResponseItemCommitVerification = {
    payload: null;
    reason: string;
    signature: null;
    verified: boolean;
  };
  type PullsListCommitsResponseItemCommitTree = { sha: string; url: string };
  type PullsListCommitsResponseItemCommitCommitter = {
    date: string;
    email: string;
    name: string;
  };
  type PullsListCommitsResponseItemCommitAuthor = {
    date: string;
    email: string;
    name: string;
  };
  type PullsListCommitsResponseItemCommit = {
    author: PullsListCommitsResponseItemCommitAuthor;
    comment_count: number;
    committer: PullsListCommitsResponseItemCommitCommitter;
    message: string;
    tree: PullsListCommitsResponseItemCommitTree;
    url: string;
    verification: PullsListCommitsResponseItemCommitVerification;
  };
  type PullsListCommitsResponseItemAuthor = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type PullsListCommitsResponseItem = {
    author: PullsListCommitsResponseItemAuthor;
    comments_url: string;
    commit: PullsListCommitsResponseItemCommit;
    committer: PullsListCommitsResponseItemCommitter;
    html_url: string;
    node_id: string;
    parents: Array<PullsListCommitsResponseItemParentsItem>;
    sha: string;
    url: string;
  };
  type PullsListCommentsForRepoResponseItemUser = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type PullsListCommentsForRepoResponseItemLinksSelf = { href: string };
  type PullsListCommentsForRepoResponseItemLinksPullRequest = { href: string };
  type PullsListCommentsForRepoResponseItemLinksHtml = { href: string };
  type PullsListCommentsForRepoResponseItemLinks = {
    html: PullsListCommentsForRepoResponseItemLinksHtml;
    pull_request: PullsListCommentsForRepoResponseItemLinksPullRequest;
    self: PullsListCommentsForRepoResponseItemLinksSelf;
  };
  type PullsListCommentsForRepoResponseItem = {
    _links: PullsListCommentsForRepoResponseItemLinks;
    author_association: string;
    body: string;
    commit_id: string;
    created_at: string;
    diff_hunk: string;
    html_url: string;
    id: number;
    in_reply_to_id: number;
    line: number;
    node_id: string;
    original_commit_id: string;
    original_line: number;
    original_position: number;
    original_start_line: number;
    path: string;
    position: number;
    pull_request_review_id: number;
    pull_request_url: string;
    side: string;
    start_line: number;
    start_side: string;
    updated_at: string;
    url: string;
    user: PullsListCommentsForRepoResponseItemUser;
  };
  type PullsListCommentsResponseItemUser = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type PullsListCommentsResponseItemLinksSelf = { href: string };
  type PullsListCommentsResponseItemLinksPullRequest = { href: string };
  type PullsListCommentsResponseItemLinksHtml = { href: string };
  type PullsListCommentsResponseItemLinks = {
    html: PullsListCommentsResponseItemLinksHtml;
    pull_request: PullsListCommentsResponseItemLinksPullRequest;
    self: PullsListCommentsResponseItemLinksSelf;
  };
  type PullsListCommentsResponseItem = {
    _links: PullsListCommentsResponseItemLinks;
    author_association: string;
    body: string;
    commit_id: string;
    created_at: string;
    diff_hunk: string;
    html_url: string;
    id: number;
    in_reply_to_id: number;
    line: number;
    node_id: string;
    original_commit_id: string;
    original_line: number;
    original_position: number;
    original_start_line: number;
    path: string;
    position: number;
    pull_request_review_id: number;
    pull_request_url: string;
    side: string;
    start_line: number;
    start_side: string;
    updated_at: string;
    url: string;
    user: PullsListCommentsResponseItemUser;
  };
  type PullsListResponseItemUser = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type PullsListResponseItemRequestedTeamsItem = {
    description: string;
    html_url: string;
    id: number;
    members_url: string;
    name: string;
    node_id: string;
    parent: null;
    permission: string;
    privacy: string;
    repositories_url: string;
    slug: string;
    url: string;
  };
  type PullsListResponseItemRequestedReviewersItem = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type PullsListResponseItemMilestoneCreator = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type PullsListResponseItemMilestone = {
    closed_at: string;
    closed_issues: number;
    created_at: string;
    creator: PullsListResponseItemMilestoneCreator;
    description: string;
    due_on: string;
    html_url: string;
    id: number;
    labels_url: string;
    node_id: string;
    number: number;
    open_issues: number;
    state: string;
    title: string;
    updated_at: string;
    url: string;
  };
  type PullsListResponseItemLabelsItem = {
    color: string;
    default: boolean;
    description: string;
    id: number;
    name: string;
    node_id: string;
    url: string;
  };
  type PullsListResponseItemHeadUser = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type PullsListResponseItemHeadRepoPermissions = {
    admin: boolean;
    pull: boolean;
    push: boolean;
  };
  type PullsListResponseItemHeadRepoOwner = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type PullsListResponseItemHeadRepo = {
    allow_merge_commit: boolean;
    allow_rebase_merge: boolean;
    allow_squash_merge: boolean;
    archive_url: string;
    archived: boolean;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    clone_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    created_at: string;
    default_branch: string;
    deployments_url: string;
    description: string;
    disabled: boolean;
    downloads_url: string;
    events_url: string;
    fork: boolean;
    forks_count: number;
    forks_url: string;
    full_name: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    has_downloads: boolean;
    has_issues: boolean;
    has_pages: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    homepage: string;
    hooks_url: string;
    html_url: string;
    id: number;
    is_template: boolean;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    language: null;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    mirror_url: string;
    name: string;
    network_count: number;
    node_id: string;
    notifications_url: string;
    open_issues_count: number;
    owner: PullsListResponseItemHeadRepoOwner;
    permissions: PullsListResponseItemHeadRepoPermissions;
    private: boolean;
    pulls_url: string;
    pushed_at: string;
    releases_url: string;
    size: number;
    ssh_url: string;
    stargazers_count: number;
    stargazers_url: string;
    statuses_url: string;
    subscribers_count: number;
    subscribers_url: string;
    subscription_url: string;
    svn_url: string;
    tags_url: string;
    teams_url: string;
    temp_clone_token: string;
    template_repository: null;
    topics: Array<string>;
    trees_url: string;
    updated_at: string;
    url: string;
    visibility: string;
    watchers_count: number;
  };
  type PullsListResponseItemHead = {
    label: string;
    ref: string;
    repo: PullsListResponseItemHeadRepo;
    sha: string;
    user: PullsListResponseItemHeadUser;
  };
  type PullsListResponseItemBaseUser = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type PullsListResponseItemBaseRepoPermissions = {
    admin: boolean;
    pull: boolean;
    push: boolean;
  };
  type PullsListResponseItemBaseRepoOwner = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type PullsListResponseItemBaseRepo = {
    allow_merge_commit: boolean;
    allow_rebase_merge: boolean;
    allow_squash_merge: boolean;
    archive_url: string;
    archived: boolean;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    clone_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    created_at: string;
    default_branch: string;
    deployments_url: string;
    description: string;
    disabled: boolean;
    downloads_url: string;
    events_url: string;
    fork: boolean;
    forks_count: number;
    forks_url: string;
    full_name: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    has_downloads: boolean;
    has_issues: boolean;
    has_pages: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    homepage: string;
    hooks_url: string;
    html_url: string;
    id: number;
    is_template: boolean;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    language: null;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    mirror_url: string;
    name: string;
    network_count: number;
    node_id: string;
    notifications_url: string;
    open_issues_count: number;
    owner: PullsListResponseItemBaseRepoOwner;
    permissions: PullsListResponseItemBaseRepoPermissions;
    private: boolean;
    pulls_url: string;
    pushed_at: string;
    releases_url: string;
    size: number;
    ssh_url: string;
    stargazers_count: number;
    stargazers_url: string;
    statuses_url: string;
    subscribers_count: number;
    subscribers_url: string;
    subscription_url: string;
    svn_url: string;
    tags_url: string;
    teams_url: string;
    temp_clone_token: string;
    template_repository: null;
    topics: Array<s